!function(e,t){"object"==typeof exports&&"undefined"!=typeof module?module.exports=t():"function"==typeof define&&define.amd?define(t):(e="undefined"!=typeof globalThis?globalThis:e||self).Swiper=t()}(this,function(){"use strict";function s(e){return null!==e&&"object"==typeof e&&"constructor"in e&&e.constructor===Object}function r(t,a){void 0===t&&(t={}),void 0===a&&(a={}),Object.keys(a).forEach(e=>{void 0===t[e]?t[e]=a[e]:s(a[e])&&s(t[e])&&0<Object.keys(a[e]).length&&r(t[e],a[e])})}const t={body:{},addEventListener(){},removeEventListener(){},activeElement:{blur(){},nodeName:""},querySelector(){return null},querySelectorAll(){return[]},getElementById(){return null},createEvent(){return{initEvent(){}}},createElement(){return{children:[],childNodes:[],style:{},setAttribute(){},getElementsByTagName(){return[]}}},createElementNS(){return{}},importNode(){return null},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""}};function T(){var e="undefined"!=typeof document?document:{};return r(e,t),e}const a={document:t,navigator:{userAgent:""},location:{hash:"",host:"",hostname:"",href:"",origin:"",pathname:"",protocol:"",search:""},history:{replaceState(){},pushState(){},go(){},back(){}},CustomEvent:function(){return this},addEventListener(){},removeEventListener(){},getComputedStyle(){return{getPropertyValue(){return""}}},Image(){},Date(){},screen:{},setTimeout(){},clearTimeout(){},matchMedia(){return{}},requestAnimationFrame(e){return"undefined"==typeof setTimeout?(e(),null):setTimeout(e,0)},cancelAnimationFrame(e){"undefined"!=typeof setTimeout&&clearTimeout(e)}};function O(){var e="undefined"!=typeof window?window:{};return r(e,a),e}class l extends Array{constructor(e){if("number"==typeof e)super(e);else{super(...e||[]);{e=this;const t=e.__proto__;Object.defineProperty(e,"__proto__",{get(){return t},set(e){t.__proto__=e}})}}}}function n(e){const t=[];return(e=void 0===e?[]:e).forEach(e=>{Array.isArray(e)?t.push(...n(e)):t.push(e)}),t}function o(e,t){return Array.prototype.filter.call(e,t)}function I(e,t){var a=O();const s=T();let i=[];if(!t&&e instanceof l)return e;if(!e)return new l(i);if("string"==typeof e){const r=e.trim();if(0<=r.indexOf("<")&&0<=r.indexOf(">")){let e="div";0===r.indexOf("<li")&&(e="ul"),0===r.indexOf("<tr")&&(e="tbody"),0!==r.indexOf("<td")&&0!==r.indexOf("<th")||(e="tr"),0===r.indexOf("<tbody")&&(e="table"),0===r.indexOf("<option")&&(e="select");const n=s.createElement(e);n.innerHTML=r;for(let e=0;e<n.childNodes.length;e+=1)i.push(n.childNodes[e])}else i=function(e,t){if("string"!=typeof e)return[e];const a=[];var s=t.querySelectorAll(e);for(let e=0;e<s.length;e+=1)a.push(s[e]);return a}(e.trim(),t||s)}else if(e.nodeType||e===a||e===s)i.push(e);else if(Array.isArray(e)){if(e instanceof l)return e;i=e}return new l(function(t){const a=[];for(let e=0;e<t.length;e+=1)-1===a.indexOf(t[e])&&a.push(t[e]);return a}(i))}I.fn=l.prototype;const d={addClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=n(t.map(e=>e.split(" ")));return this.forEach(e=>{e.classList.add(...s)}),this},removeClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=n(t.map(e=>e.split(" ")));return this.forEach(e=>{e.classList.remove(...s)}),this},hasClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=n(t.map(e=>e.split(" ")));return 0<o(this,t=>0<s.filter(e=>t.classList.contains(e)).length).length},toggleClass:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];const s=n(t.map(e=>e.split(" ")));this.forEach(t=>{s.forEach(e=>{t.classList.toggle(e)})})},attr:function(t,a){if(1===arguments.length&&"string"==typeof t)return this[0]?this[0].getAttribute(t):void 0;for(let e=0;e<this.length;e+=1)if(2===arguments.length)this[e].setAttribute(t,a);else for(const s in t)this[e][s]=t[s],this[e].setAttribute(s,t[s]);return this},removeAttr:function(t){for(let e=0;e<this.length;e+=1)this[e].removeAttribute(t);return this},transform:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transform=t;return this},transition:function(t){for(let e=0;e<this.length;e+=1)this[e].style.transitionDuration="string"!=typeof t?t+"ms":t;return this},on:function(){for(var p=arguments.length,e=new Array(p),t=0;t<p;t++)e[t]=arguments[t];let[c,i,r,a]=e;function u(e){var t=e.target;if(t){const s=e.target.dom7EventData||[];if(s.indexOf(e)<0&&s.unshift(e),I(t).is(i))r.apply(t,s);else{var a=I(t).parents();for(let e=0;e<a.length;e+=1)I(a[e]).is(i)&&r.apply(a[e],s)}}}function h(e){const t=e&&e.target&&e.target.dom7EventData||[];t.indexOf(e)<0&&t.unshift(e),r.apply(this,t)}"function"==typeof e[1]&&([c,r,a]=e,i=void 0),a=a||!1;var s=c.split(" ");let n;for(let e=0;e<this.length;e+=1){const d=this[e];if(i)for(n=0;n<s.length;n+=1){var l=s[n];d.dom7LiveListeners||(d.dom7LiveListeners={}),d.dom7LiveListeners[l]||(d.dom7LiveListeners[l]=[]),d.dom7LiveListeners[l].push({listener:r,proxyListener:u}),d.addEventListener(l,u,a)}else for(n=0;n<s.length;n+=1){var o=s[n];d.dom7Listeners||(d.dom7Listeners={}),d.dom7Listeners[o]||(d.dom7Listeners[o]=[]),d.dom7Listeners[o].push({listener:r,proxyListener:h}),d.addEventListener(o,h,a)}}return this},off:function(){for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];let[d,s,i,r]=t;"function"==typeof t[1]&&([d,i,r]=t,s=void 0),r=r||!1;var p=d.split(" ");for(let e=0;e<p.length;e+=1){var n=p[e];for(let e=0;e<this.length;e+=1){const o=this[e];let t;if(!s&&o.dom7Listeners?t=o.dom7Listeners[n]:s&&o.dom7LiveListeners&&(t=o.dom7LiveListeners[n]),t&&t.length)for(let e=t.length-1;0<=e;--e){var l=t[e];(!i||l.listener!==i)&&!(i&&l.listener&&l.listener.dom7proxy&&l.listener.dom7proxy===i)&&i||(o.removeEventListener(n,l.proxyListener,r),t.splice(e,1))}}}return this},trigger:function(){const t=O();for(var e=arguments.length,a=new Array(e),s=0;s<e;s++)a[s]=arguments[s];var i=a[0].split(" "),r=a[1];for(let e=0;e<i.length;e+=1){var n,l=i[e];for(let e=0;e<this.length;e+=1){const o=this[e];t.CustomEvent&&(n=new t.CustomEvent(l,{detail:r,bubbles:!0,cancelable:!0}),o.dom7EventData=a.filter((e,t)=>0<t),o.dispatchEvent(n),o.dom7EventData=[],delete o.dom7EventData)}}return this},transitionEnd:function(a){const s=this;return a&&s.on("transitionend",function e(t){t.target===this&&(a.call(this,t),s.off("transitionend",e))}),this},outerWidth:function(e){if(0<this.length){if(e){const t=this.styles();return this[0].offsetWidth+parseFloat(t.getPropertyValue("margin-right"))+parseFloat(t.getPropertyValue("margin-left"))}return this[0].offsetWidth}return null},outerHeight:function(e){if(0<this.length){if(e){const t=this.styles();return this[0].offsetHeight+parseFloat(t.getPropertyValue("margin-top"))+parseFloat(t.getPropertyValue("margin-bottom"))}return this[0].offsetHeight}return null},styles:function(){const e=O();return this[0]?e.getComputedStyle(this[0],null):{}},offset:function(){if(0<this.length){var e=O(),t=T();const r=this[0];var a=r.getBoundingClientRect(),t=t.body,s=r.clientTop||t.clientTop||0,t=r.clientLeft||t.clientLeft||0,i=r===e?e.scrollY:r.scrollTop,e=r===e?e.scrollX:r.scrollLeft;return{top:a.top+i-s,left:a.left+e-t}}return null},css:function(e,t){const a=O();let s;if(1===arguments.length){if("string"!=typeof e){for(s=0;s<this.length;s+=1)for(const i in e)this[s].style[i]=e[i];return this}if(this[0])return a.getComputedStyle(this[0],null).getPropertyValue(e)}if(2!==arguments.length||"string"!=typeof e)return this;for(s=0;s<this.length;s+=1)this[s].style[e]=t;return this},each:function(a){return a&&this.forEach((e,t)=>{a.apply(e,[e,t])}),this},html:function(t){if(void 0===t)return this[0]?this[0].innerHTML:null;for(let e=0;e<this.length;e+=1)this[e].innerHTML=t;return this},text:function(t){if(void 0===t)return this[0]?this[0].textContent.trim():null;for(let e=0;e<this.length;e+=1)this[e].textContent=t;return this},is:function(e){var t=O(),a=T();const s=this[0];let i,r;if(!s||void 0===e)return!1;if("string"==typeof e){if(s.matches)return s.matches(e);if(s.webkitMatchesSelector)return s.webkitMatchesSelector(e);if(s.msMatchesSelector)return s.msMatchesSelector(e);for(i=I(e),r=0;r<i.length;r+=1)if(i[r]===s)return!0;return!1}if(e===a)return s===a;if(e===t)return s===t;if(e.nodeType||e instanceof l){for(i=e.nodeType?[e]:e,r=0;r<i.length;r+=1)if(i[r]===s)return!0;return!1}return!1},index:function(){let e=this[0],t;if(e){for(t=0;null!==(e=e.previousSibling);)1===e.nodeType&&(t+=1);return t}},eq:function(e){if(void 0===e)return this;var t=this.length;return I(t-1<e?[]:e<0?(t=t+e)<0?[]:[this[t]]:[this[e]])},append:function(){var a;const s=T();for(let e=0;e<arguments.length;e+=1){a=e<0||arguments.length<=e?void 0:arguments[e];for(let t=0;t<this.length;t+=1)if("string"==typeof a){const i=s.createElement("div");for(i.innerHTML=a;i.firstChild;)this[t].appendChild(i.firstChild)}else if(a instanceof l)for(let e=0;e<a.length;e+=1)this[t].appendChild(a[e]);else this[t].appendChild(a)}return this},prepend:function(e){const t=T();let a,s;for(a=0;a<this.length;a+=1)if("string"==typeof e){const i=t.createElement("div");for(i.innerHTML=e,s=i.childNodes.length-1;0<=s;--s)this[a].insertBefore(i.childNodes[s],this[a].childNodes[0])}else if(e instanceof l)for(s=0;s<e.length;s+=1)this[a].insertBefore(e[s],this[a].childNodes[0]);else this[a].insertBefore(e,this[a].childNodes[0]);return this},next:function(e){return 0<this.length?e?this[0].nextElementSibling&&I(this[0].nextElementSibling).is(e)?I([this[0].nextElementSibling]):I([]):this[0].nextElementSibling?I([this[0].nextElementSibling]):I([]):I([])},nextAll:function(e){const t=[];let a=this[0];if(!a)return I([]);for(;a.nextElementSibling;){var s=a.nextElementSibling;(!e||I(s).is(e))&&t.push(s),a=s}return I(t)},prev:function(e){var t;return 0<this.length?(t=this[0],e?t.previousElementSibling&&I(t.previousElementSibling).is(e)?I([t.previousElementSibling]):I([]):t.previousElementSibling?I([t.previousElementSibling]):I([])):I([])},prevAll:function(e){const t=[];let a=this[0];if(!a)return I([]);for(;a.previousElementSibling;){var s=a.previousElementSibling;(!e||I(s).is(e))&&t.push(s),a=s}return I(t)},parent:function(t){const a=[];for(let e=0;e<this.length;e+=1)null===this[e].parentNode||t&&!I(this[e].parentNode).is(t)||a.push(this[e].parentNode);return I(a)},parents:function(a){const s=[];for(let t=0;t<this.length;t+=1){let e=this[t].parentNode;for(;e;)a&&!I(e).is(a)||s.push(e),e=e.parentNode}return I(s)},closest:function(e){let t=this;return void 0===e?I([]):t=t.is(e)?t:t.parents(e).eq(0)},find:function(t){const a=[];for(let e=0;e<this.length;e+=1){var s=this[e].querySelectorAll(t);for(let e=0;e<s.length;e+=1)a.push(s[e])}return I(a)},children:function(t){const a=[];for(let e=0;e<this.length;e+=1){var s=this[e].children;for(let e=0;e<s.length;e+=1)t&&!I(s[e]).is(t)||a.push(s[e])}return I(a)},filter:function(e){return I(o(this,e))},remove:function(){for(let e=0;e<this.length;e+=1)this[e].parentNode&&this[e].parentNode.removeChild(this[e]);return this}};function C(e,t){return void 0===t&&(t=0),setTimeout(e,t)}function g(){return Date.now()}function L(e,t){void 0===t&&(t="x");const a=O();let s,i,r;const n=function(e){const t=O();let a;return a=(a=!(a=t.getComputedStyle?t.getComputedStyle(e,null):a)&&e.currentStyle?e.currentStyle:a)||e.style}(e);return a.WebKitCSSMatrix?(6<(i=n.transform||n.webkitTransform).split(",").length&&(i=i.split(", ").map(e=>e.replace(",",".")).join(", ")),r=new a.WebKitCSSMatrix("none"===i?"":i)):(r=n.MozTransform||n.OTransform||n.MsTransform||n.msTransform||n.transform||n.getPropertyValue("transform").replace("translate(","matrix(1, 0, 0, 1,"),s=r.toString().split(",")),"x"===t&&(i=a.WebKitCSSMatrix?r.m41:16===s.length?parseFloat(s[12]):parseFloat(s[4])),(i="y"===t?a.WebKitCSSMatrix?r.m42:16===s.length?parseFloat(s[13]):parseFloat(s[5]):i)||0}function u(e){return"object"==typeof e&&null!==e&&e.constructor&&"Object"===Object.prototype.toString.call(e).slice(8,-1)}function c(e){const a=Object(arguments.length<=0?void 0:e),t=["__proto__","constructor","prototype"];for(let e=1;e<arguments.length;e+=1){var s=e<0||arguments.length<=e?void 0:arguments[e];if(null!=s&&(l=s,!("undefined"!=typeof window&&void 0!==window.HTMLElement?l instanceof HTMLElement:l&&(1===l.nodeType||11===l.nodeType)))){var i=Object.keys(Object(s)).filter(e=>t.indexOf(e)<0);for(let e=0,t=i.length;e<t;e+=1){var r=i[e],n=Object.getOwnPropertyDescriptor(s,r);void 0!==n&&n.enumerable&&(u(a[r])&&u(s[r])?s[r].__swiper__?a[r]=s[r]:c(a[r],s[r]):!u(a[r])&&u(s[r])?(a[r]={},s[r].__swiper__?a[r]=s[r]:c(a[r],s[r])):a[r]=s[r])}}}var l;return a}function W(e,t,a){e.style.setProperty(t,a)}function E(e){let{swiper:a,targetPosition:s,side:i}=e;const r=O(),n=-a.translate;let l=null,o;const u=a.params.speed,d=(a.wrapperEl.style.scrollSnapType="none",r.cancelAnimationFrame(a.cssModeFrameID),s>n?"next":"prev"),p=(e,t)=>"next"===d&&t<=e||"prev"===d&&e<=t,c=()=>{o=(new Date).getTime(),null===l&&(l=o);var e=Math.max(Math.min((o-l)/u,1),0),e=.5-Math.cos(e*Math.PI)/2;let t=n+e*(s-n);if(p(t,s)&&(t=s),a.wrapperEl.scrollTo({[i]:t}),p(t,s))return a.wrapperEl.style.overflow="hidden",a.wrapperEl.style.scrollSnapType="",setTimeout(()=>{a.wrapperEl.style.overflow="",a.wrapperEl.scrollTo({[i]:t})}),void r.cancelAnimationFrame(a.cssModeFrameID);a.cssModeFrameID=r.requestAnimationFrame(c)};c()}Object.keys(d).forEach(e=>{Object.defineProperty(I.fn,e,{value:d[e],writable:!0})});let e;function h(){return e=e||function(){const a=O();var e=T();return{smoothScroll:e.documentElement&&"scrollBehavior"in e.documentElement.style,touch:!!("ontouchstart"in a||a.DocumentTouch&&e instanceof a.DocumentTouch),passiveListener:function(){let e=!1;try{var t=Object.defineProperty({},"passive",{get(){e=!0}});a.addEventListener("testPassiveListener",null,t)}catch(e){}return e}(),gestures:"ongesturestart"in a}}()}let m;function f(e){return void 0===e&&(e={}),m=m||function(e){var e=(void 0===e?{}:e)["userAgent"],t=h(),a=(r=O()).navigator.platform;const s=e||r.navigator.userAgent,i={ios:!1,android:!1};var e=r.screen.width,r=r.screen.height,n=s.match(/(Android);?[\s\/]+([\d.]+)?/);let l=s.match(/(iPad).*OS\s([\d_]+)/);var o=s.match(/(iPod)(.*OS\s([\d_]+))?/),p=!l&&s.match(/(iPhone\sOS|iOS)\s([\d_]+)/),c="Win32"===a;let d="MacIntel"===a;return!l&&d&&t.touch&&0<=["1024x1366","1366x1024","834x1194","1194x834","834x1112","1112x834","768x1024","1024x768","820x1180","1180x820","810x1080","1080x810"].indexOf(e+"x"+r)&&(l=(l=s.match(/(Version)\/([\d.]+)/))||[0,1,"13_0_0"],d=!1),n&&!c&&(i.os="android",i.android=!0),(l||p||o)&&(i.os="ios",i.ios=!0),i}(e)}let v;function w(){const t=O();return{isSafari:function(){const e=t.navigator.userAgent.toLowerCase();return 0<=e.indexOf("safari")&&e.indexOf("chrome")<0&&e.indexOf("android")<0}(),isWebView:/(iPhone|iPod|iPad).*AppleWebKit(?!.*Safari)/i.test(t.navigator.userAgent)}}function x(e){let{swiper:t,runCallbacks:a,direction:s,step:i}=e;var{activeIndex:e,previousIndex:r}=t;let n=s;n=n||(r<e?"next":e<r?"prev":"reset"),t.emit("transition"+i),a&&e!==r&&("reset"!==n?(t.emit("slideChangeTransition"+i),"next"===n?t.emit("slideNextTransition"+i):t.emit("slidePrevTransition"+i)):t.emit("slideResetTransition"+i))}function y(a,e){return function e(t){return t&&t!==T()&&t!==O()?(t=t.assignedSlot||t).closest(a)||e(t.getRootNode().host):null}(e=void 0===e?this:e)}function S(){var e,t,a=this,{params:s,el:i}=a;i&&0===i.offsetWidth||(s.breakpoints&&a.setBreakpoint(),{allowSlideNext:i,allowSlidePrev:e,snapGrid:t}=a,a.allowSlideNext=!0,a.allowSlidePrev=!0,a.updateSize(),a.updateSlides(),a.updateSlidesClasses(),("auto"===s.slidesPerView||1<s.slidesPerView)&&a.isEnd&&!a.isBeginning&&!a.params.centeredSlides?a.slideTo(a.slides.length-1,0,!1,!0):a.slideTo(a.activeIndex,0,!1,!0),a.autoplay&&a.autoplay.running&&a.autoplay.paused&&a.autoplay.run(),a.allowSlidePrev=e,a.allowSlideNext=i,a.params.watchOverflow&&t!==a.snapGrid&&a.checkOverflow())}let M=!1;function $(){}const P=(e,t)=>{const a=T(),{params:s,touchEvents:i,el:r,wrapperEl:p,device:c,support:n}=e;var l,o=!!s.nested,d="on"===t?"addEventListener":"removeEventListener";n.touch?(l=!("touchstart"!==i.start||!n.passiveListener||!s.passiveListeners)&&{passive:!0,capture:!1},r[d](i.start,e.onTouchStart,l),r[d](i.move,e.onTouchMove,n.passiveListener?{passive:!1,capture:o}:o),r[d](i.end,e.onTouchEnd,l),i.cancel&&r[d](i.cancel,e.onTouchEnd,l)):(r[d](i.start,e.onTouchStart,!1),a[d](i.move,e.onTouchMove,o),a[d](i.end,e.onTouchEnd,!1)),(s.preventClicks||s.preventClicksPropagation)&&r[d]("click",e.onClick,!0),s.cssMode&&p[d]("scroll",e.onScroll),s.updateOnWindowResize?e[t](c.ios||c.android?"resize orientationchange observerUpdate":"resize observerUpdate",S,!0):e[t]("observerUpdate",S,!0)};const k=(e,t)=>e.grid&&t.grid&&1<t.grid.rows;var z={init:!0,direction:"horizontal",touchEventsTarget:"wrapper",initialSlide:0,speed:300,cssMode:!1,updateOnWindowResize:!0,resizeObserver:!0,nested:!1,createElements:!1,enabled:!0,focusableElements:"input, select, option, textarea, button, video, label",width:null,height:null,preventInteractionOnTransition:!1,userAgent:null,url:null,edgeSwipeDetection:!1,edgeSwipeThreshold:20,autoHeight:!1,setWrapperSize:!1,virtualTranslate:!1,effect:"slide",breakpoints:void 0,breakpointsBase:"window",spaceBetween:0,slidesPerView:1,slidesPerGroup:1,slidesPerGroupSkip:0,slidesPerGroupAuto:!1,centeredSlides:!1,centeredSlidesBounds:!1,slidesOffsetBefore:0,slidesOffsetAfter:0,normalizeSlideIndex:!0,centerInsufficientSlides:!1,watchOverflow:!0,roundLengths:!1,touchRatio:1,touchAngle:45,simulateTouch:!0,shortSwipes:!0,longSwipes:!0,longSwipesRatio:.5,longSwipesMs:300,followFinger:!0,allowTouchMove:!0,threshold:0,touchMoveStopPropagation:!1,touchStartPreventDefault:!0,touchStartForcePreventDefault:!1,touchReleaseOnEdges:!1,uniqueNavElements:!0,resistance:!0,resistanceRatio:.85,watchSlidesProgress:!1,grabCursor:!1,preventClicks:!0,preventClicksPropagation:!0,slideToClickedSlide:!1,preloadImages:!0,updateOnImagesReady:!0,loop:!1,loopAdditionalSlides:0,loopedSlides:null,loopFillGroupWithBlank:!1,loopPreventsSlide:!0,rewind:!1,allowSlidePrev:!0,allowSlideNext:!0,swipeHandler:null,noSwiping:!0,noSwipingClass:"swiper-no-swiping",noSwipingSelector:null,passiveListeners:!0,maxBackfaceHiddenSlides:10,containerModifierClass:"swiper-",slideClass:"swiper-slide",slideBlankClass:"swiper-slide-invisible-blank",slideActiveClass:"swiper-slide-active",slideDuplicateActiveClass:"swiper-slide-duplicate-active",slideVisibleClass:"swiper-slide-visible",slideDuplicateClass:"swiper-slide-duplicate",slideNextClass:"swiper-slide-next",slideDuplicateNextClass:"swiper-slide-duplicate-next",slidePrevClass:"swiper-slide-prev",slideDuplicatePrevClass:"swiper-slide-duplicate-prev",wrapperClass:"swiper-wrapper",runCallbacksOnInit:!0,_emitClasses:!1};const A={eventsEmitter:{on(e,t,a){const s=this;if("function"!=typeof t)return s;const i=a?"unshift":"push";return e.split(" ").forEach(e=>{s.eventsListeners[e]||(s.eventsListeners[e]=[]),s.eventsListeners[e][i](t)}),s},once(s,i,e){const r=this;return"function"!=typeof i?r:(n.__emitterProxy=i,r.on(s,n,e));function n(){r.off(s,n),n.__emitterProxy&&delete n.__emitterProxy;for(var e=arguments.length,t=new Array(e),a=0;a<e;a++)t[a]=arguments[a];i.apply(r,t)}},onAny(e,t){if("function"!=typeof e)return this;t=t?"unshift":"push";return this.eventsAnyListeners.indexOf(e)<0&&this.eventsAnyListeners[t](e),this},offAny(e){var t=this;if(!t.eventsAnyListeners)return t;e=t.eventsAnyListeners.indexOf(e);return 0<=e&&t.eventsAnyListeners.splice(e,1),t},off(e,s){const i=this;return i.eventsListeners&&e.split(" ").forEach(a=>{void 0===s?i.eventsListeners[a]=[]:i.eventsListeners[a]&&i.eventsListeners[a].forEach((e,t)=>{(e===s||e.__emitterProxy&&e.__emitterProxy===s)&&i.eventsListeners[a].splice(t,1)})}),i},emit(){const e=this;if(!e.eventsListeners)return e;let t,a,s;for(var i=arguments.length,r=new Array(i),n=0;n<i;n++)r[n]=arguments[n];s="string"==typeof r[0]||Array.isArray(r[0])?(t=r[0],a=r.slice(1,r.length),e):(t=r[0].events,a=r[0].data,r[0].context||e),a.unshift(s);const l=Array.isArray(t)?t:t.split(" ");return l.forEach(t=>{e.eventsAnyListeners&&e.eventsAnyListeners.length&&e.eventsAnyListeners.forEach(e=>{e.apply(s,[t,...a])}),e.eventsListeners&&e.eventsListeners[t]&&e.eventsListeners[t].forEach(e=>{e.apply(s,a)})}),e}},update:{updateSize:function(){var e=this;let t,a;const s=e.$el;t=void 0!==e.params.width&&null!==e.params.width?e.params.width:s[0].clientWidth,a=void 0!==e.params.height&&null!==e.params.height?e.params.height:s[0].clientHeight,0===t&&e.isHorizontal()||0===a&&e.isVertical()||(t=t-parseInt(s.css("padding-left")||0,10)-parseInt(s.css("padding-right")||0,10),a=a-parseInt(s.css("padding-top")||0,10)-parseInt(s.css("padding-bottom")||0,10),Number.isNaN(t)&&(t=0),Number.isNaN(a)&&(a=0),Object.assign(e,{width:t,height:a,size:e.isHorizontal()?t:a}))},updateSlides:function(){const a=this;function s(e){return a.isHorizontal()?e:{width:"height","margin-top":"margin-left","margin-bottom ":"margin-right","margin-left":"margin-top","margin-right":"margin-bottom","padding-left":"padding-top","padding-right":"padding-bottom",marginRight:"marginBottom"}[e]}function u(e,t){return parseFloat(e.getPropertyValue(s(t))||0)}const i=a.params,{$wrapperEl:e,size:r,rtlTranslate:h,wrongRTL:m}=a;var f=a.virtual&&i.virtual.enabled,v=(f?a.virtual:a).slides.length;const n=e.children("."+a.params.slideClass);var g=(f?a.virtual.slides:n).length;let l=[];const w=[],b=[];let x=i.slidesOffsetBefore,y=("function"==typeof x&&(x=i.slidesOffsetBefore.call(a)),i.slidesOffsetAfter);"function"==typeof y&&(y=i.slidesOffsetAfter.call(a));var E=a.snapGrid.length,T=a.slidesGrid.length;let o=i.spaceBetween,d=-x,C=0,S=0;if(void 0!==r){"string"==typeof o&&0<=o.indexOf("%")&&(o=parseFloat(o.replace("%",""))/100*r),a.virtualSize=-o,h?n.css({marginLeft:"",marginBottom:"",marginTop:""}):n.css({marginRight:"",marginBottom:"",marginTop:""}),i.centeredSlides&&i.cssMode&&(W(a.wrapperEl,"--swiper-centered-offset-before",""),W(a.wrapperEl,"--swiper-centered-offset-after",""));var M=i.grid&&1<i.grid.rows&&a.grid;M&&a.grid.initSlides(g);let t;var $,P="auto"===i.slidesPerView&&i.breakpoints&&0<Object.keys(i.breakpoints).filter(e=>void 0!==i.breakpoints[e].slidesPerView).length;for(let e=0;e<g;e+=1){t=0;const p=n.eq(e);if(M&&a.grid.updateSlide(e,p,g,s),"none"!==p.css("display")){if("auto"===i.slidesPerView){P&&(n[e].style[s("width")]="");const c=getComputedStyle(p[0]);var k,z,O,I,L,A,D,G=p[0].style.transform,B=p[0].style.webkitTransform;G&&(p[0].style.transform="none"),B&&(p[0].style.webkitTransform="none"),t=i.roundLengths?a.isHorizontal()?p.outerWidth(!0):p.outerHeight(!0):(k=u(c,"width"),z=u(c,"padding-left"),O=u(c,"padding-right"),I=u(c,"margin-left"),L=u(c,"margin-right"),(A=c.getPropertyValue("box-sizing"))&&"border-box"===A?k+I+L:({clientWidth:A,offsetWidth:D}=p[0],k+z+O+I+L+(D-A))),G&&(p[0].style.transform=G),B&&(p[0].style.webkitTransform=B),i.roundLengths&&(t=Math.floor(t))}else t=(r-(i.slidesPerView-1)*o)/i.slidesPerView,i.roundLengths&&(t=Math.floor(t)),n[e]&&(n[e].style[s("width")]=t+"px");n[e]&&(n[e].swiperSlideSize=t),b.push(t),i.centeredSlides?(d=d+t/2+C/2+o,0===C&&0!==e&&(d=d-r/2-o),0===e&&(d=d-r/2-o),Math.abs(d)<.001&&(d=0),i.roundLengths&&(d=Math.floor(d)),S%i.slidesPerGroup==0&&l.push(d),w.push(d)):(i.roundLengths&&(d=Math.floor(d)),(S-Math.min(a.params.slidesPerGroupSkip,S))%a.params.slidesPerGroup==0&&l.push(d),w.push(d),d=d+t+o),a.virtualSize+=t+o,C=t,S+=1}}if(a.virtualSize=Math.max(a.virtualSize,r)+y,h&&m&&("slide"===i.effect||"coverflow"===i.effect)&&e.css({width:a.virtualSize+i.spaceBetween+"px"}),i.setWrapperSize&&e.css({[s("width")]:a.virtualSize+i.spaceBetween+"px"}),M&&a.grid.updateWrapperSize(t,l,s),!i.centeredSlides){const N=[];for(let t=0;t<l.length;t+=1){let e=l[t];i.roundLengths&&(e=Math.floor(e)),l[t]<=a.virtualSize-r&&N.push(e)}l=N,1<Math.floor(a.virtualSize-r)-Math.floor(l[l.length-1])&&l.push(a.virtualSize-r)}if(0===l.length&&(l=[0]),0!==i.spaceBetween&&($=a.isHorizontal()&&h?"marginLeft":s("marginRight"),n.filter((e,t)=>!i.cssMode||t!==n.length-1).css({[$]:o+"px"})),i.centeredSlides&&i.centeredSlidesBounds){let t=0;b.forEach(e=>{t+=e+(i.spaceBetween||0)});const H=(t-=i.spaceBetween)-r;l=l.map(e=>e<0?-x:e>H?H+y:e)}if(i.centerInsufficientSlides){let t=0;if(b.forEach(e=>{t+=e+(i.spaceBetween||0)}),(t-=i.spaceBetween)<r){const X=(r-t)/2;l.forEach((e,t)=>{l[t]=e-X}),w.forEach((e,t)=>{w[t]=e+X})}}if(Object.assign(a,{slides:n,snapGrid:l,slidesGrid:w,slidesSizesGrid:b}),i.centeredSlides&&i.cssMode&&!i.centeredSlidesBounds){W(a.wrapperEl,"--swiper-centered-offset-before",-l[0]+"px"),W(a.wrapperEl,"--swiper-centered-offset-after",a.size/2-b[b.length-1]/2+"px");const Y=-a.snapGrid[0],R=-a.slidesGrid[0];a.snapGrid=a.snapGrid.map(e=>e+Y),a.slidesGrid=a.slidesGrid.map(e=>e+R)}g!==v&&a.emit("slidesLengthChange"),l.length!==E&&(a.params.watchOverflow&&a.checkOverflow(),a.emit("snapGridLengthChange")),w.length!==T&&a.emit("slidesGridLengthChange"),i.watchSlidesProgress&&a.updateSlidesOffset(),f||i.cssMode||"slide"!==i.effect&&"fade"!==i.effect||($=i.containerModifierClass+"backface-hidden",v=a.$el.hasClass($),g<=i.maxBackfaceHiddenSlides?v||a.$el.addClass($):v&&a.$el.removeClass($))}},updateAutoHeight:function(e){const a=this,t=[],s=a.virtual&&a.params.virtual.enabled;let i=0,r;"number"==typeof e?a.setTransition(e):!0===e&&a.setTransition(a.params.speed);var n,l=t=>(s?a.slides.filter(e=>parseInt(e.getAttribute("data-swiper-slide-index"),10)===t):a.slides.eq(t))[0];if("auto"!==a.params.slidesPerView&&1<a.params.slidesPerView)if(a.params.centeredSlides)a.visibleSlides.each(e=>{t.push(e)});else for(r=0;r<Math.ceil(a.params.slidesPerView);r+=1){var o=a.activeIndex+r;if(o>a.slides.length&&!s)break;t.push(l(o))}else t.push(l(a.activeIndex));for(r=0;r<t.length;r+=1)void 0!==t[r]&&(n=t[r].offsetHeight,i=n>i?n:i);!i&&0!==i||a.$wrapperEl.css("height",i+"px")},updateSlidesOffset:function(){const t=this.slides;for(let e=0;e<t.length;e+=1)t[e].swiperSlideOffset=this.isHorizontal()?t[e].offsetLeft:t[e].offsetTop},updateSlidesProgress:function(e){void 0===e&&(e=this&&this.translate||0);var s=this,i=s.params;const{slides:r,rtlTranslate:n,snapGrid:u}=s;if(0!==r.length){void 0===r[0].swiperSlideOffset&&s.updateSlidesOffset();let a=n?e:-e;r.removeClass(i.slideVisibleClass),s.visibleSlidesIndexes=[],s.visibleSlides=[];for(let t=0;t<r.length;t+=1){const c=r[t];let e=c.swiperSlideOffset;i.cssMode&&i.centeredSlides&&(e-=r[0].swiperSlideOffset);var l=(a+(i.centeredSlides?s.minTranslate():0)-e)/(c.swiperSlideSize+i.spaceBetween),o=(a-u[0]+(i.centeredSlides?s.minTranslate():0)-e)/(c.swiperSlideSize+i.spaceBetween),d=-(a-e),p=d+s.slidesSizesGrid[t];(0<=d&&d<s.size-1||1<p&&p<=s.size||d<=0&&p>=s.size)&&(s.visibleSlides.push(c),s.visibleSlidesIndexes.push(t),r.eq(t).addClass(i.slideVisibleClass)),c.progress=n?-l:l,c.originalProgress=n?-o:o}s.visibleSlides=I(s.visibleSlides)}},updateProgress:function(e){var t=this,a=(void 0===e&&(a=t.rtlTranslate?-1:1,e=t&&t.translate&&t.translate*a||0),t.params),s=t.maxTranslate()-t.minTranslate();let{progress:i,isBeginning:r,isEnd:n}=t;var l=r,o=n;n=0==s?(i=0,r=!0):(i=(e-t.minTranslate())/s,r=i<=0,1<=i),Object.assign(t,{progress:i,isBeginning:r,isEnd:n}),(a.watchSlidesProgress||a.centeredSlides&&a.autoHeight)&&t.updateSlidesProgress(e),r&&!l&&t.emit("reachBeginning toEdge"),n&&!o&&t.emit("reachEnd toEdge"),(l&&!r||o&&!n)&&t.emit("fromEdge"),t.emit("progress",i)},updateSlidesClasses:function(){const{slides:e,params:t,$wrapperEl:a,activeIndex:s,realIndex:i}=this;var r=this.virtual&&t.virtual.enabled;e.removeClass(`${t.slideActiveClass} ${t.slideNextClass} ${t.slidePrevClass} ${t.slideDuplicateActiveClass} ${t.slideDuplicateNextClass} `+t.slideDuplicatePrevClass);let n,l=((n=r?this.$wrapperEl.find(`.${t.slideClass}[data-swiper-slide-index="${s}"]`):e.eq(s)).addClass(t.slideActiveClass),t.loop&&(n.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${i}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${i}"]`)).addClass(t.slideDuplicateActiveClass),n.nextAll("."+t.slideClass).eq(0).addClass(t.slideNextClass)),o=(t.loop&&0===l.length&&(l=e.eq(0)).addClass(t.slideNextClass),n.prevAll("."+t.slideClass).eq(0).addClass(t.slidePrevClass));t.loop&&0===o.length&&(o=e.eq(-1)).addClass(t.slidePrevClass),t.loop&&((l.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${l.attr("data-swiper-slide-index")}"]`)).addClass(t.slideDuplicateNextClass),(o.hasClass(t.slideDuplicateClass)?a.children(`.${t.slideClass}:not(.${t.slideDuplicateClass})[data-swiper-slide-index="${o.attr("data-swiper-slide-index")}"]`):a.children(`.${t.slideClass}.${t.slideDuplicateClass}[data-swiper-slide-index="${o.attr("data-swiper-slide-index")}"]`)).addClass(t.slideDuplicatePrevClass)),this.emitSlidesClasses()},updateActiveIndex:function(e){var t=this,a=t.rtlTranslate?t.translate:-t.translate;const{slidesGrid:s,snapGrid:i,params:r,activeIndex:n,realIndex:l,snapIndex:p}=t;let o=e,d;if(void 0===o){for(let e=0;e<s.length;e+=1)void 0!==s[e+1]?a>=s[e]&&a<s[e+1]-(s[e+1]-s[e])/2?o=e:a>=s[e]&&a<s[e+1]&&(o=e+1):a>=s[e]&&(o=e);r.normalizeSlideIndex&&(o<0||void 0===o)&&(o=0)}(d=0<=i.indexOf(a)?i.indexOf(a):(e=Math.min(r.slidesPerGroupSkip,o))+Math.floor((o-e)/r.slidesPerGroup))>=i.length&&(d=i.length-1),o!==n?(e=parseInt(t.slides.eq(o).attr("data-swiper-slide-index")||o,10),Object.assign(t,{snapIndex:d,realIndex:e,previousIndex:n,activeIndex:o}),t.emit("activeIndexChange"),t.emit("snapIndexChange"),l!==e&&t.emit("realIndexChange"),(t.initialized||t.params.runCallbacksOnInit)&&t.emit("slideChange")):d!==p&&(t.snapIndex=d,t.emit("snapIndexChange"))},updateClickedSlide:function(e){var t=this,a=t.params,s=I(e).closest("."+a.slideClass)[0];let i=!1,r;if(s)for(let e=0;e<t.slides.length;e+=1)if(t.slides[e]===s){i=!0,r=e;break}if(!s||!i)return t.clickedSlide=void 0,void(t.clickedIndex=void 0);t.clickedSlide=s,t.virtual&&t.params.virtual.enabled?t.clickedIndex=parseInt(I(s).attr("data-swiper-slide-index"),10):t.clickedIndex=r,a.slideToClickedSlide&&void 0!==t.clickedIndex&&t.clickedIndex!==t.activeIndex&&t.slideToClickedSlide()}},translate:{getTranslate:function(e){void 0===e&&(e=this.isHorizontal()?"x":"y");var{params:t,rtlTranslate:a,translate:s,$wrapperEl:i}=this;if(t.virtualTranslate)return a?-s:s;if(t.cssMode)return s;let r=L(i[0],e);return(r=a?-r:r)||0},setTranslate:function(e,t){var a=this;const{rtlTranslate:s,params:i,$wrapperEl:r,wrapperEl:n,progress:p}=a;let l=0,o=0;a.isHorizontal()?l=s?-e:e:o=e,i.roundLengths&&(l=Math.floor(l),o=Math.floor(o)),i.cssMode?n[a.isHorizontal()?"scrollLeft":"scrollTop"]=a.isHorizontal()?-l:-o:i.virtualTranslate||r.transform(`translate3d(${l}px, ${o}px, 0px)`),a.previousTranslate=a.translate,a.translate=a.isHorizontal()?l:o;let c;var d=a.maxTranslate()-a.minTranslate();(c=0==d?0:(e-a.minTranslate())/d)!==p&&a.updateProgress(e),a.emit("setTranslate",a.translate,t)},minTranslate:function(){return-this.snapGrid[0]},maxTranslate:function(){return-this.snapGrid[this.snapGrid.length-1]},translateTo:function(e,t,a,s,i){void 0===e&&(e=0),void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),void 0===s&&(s=!0);const r=this,{params:n,wrapperEl:l}=r;if(r.animating&&n.preventInteractionOnTransition)return!1;var o=r.minTranslate(),p=r.maxTranslate();let d;if(d=s&&o<e?o:s&&e<p?p:e,r.updateProgress(d),n.cssMode){o=r.isHorizontal();if(0===t)l[o?"scrollLeft":"scrollTop"]=-d;else{if(!r.support.smoothScroll)return E({swiper:r,targetPosition:-d,side:o?"left":"top"}),!0;l.scrollTo({[o?"left":"top"]:-d,behavior:"smooth"})}return!0}return 0===t?(r.setTransition(0),r.setTranslate(d),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionEnd"))):(r.setTransition(t),r.setTranslate(d),a&&(r.emit("beforeTransitionStart",t,i),r.emit("transitionStart")),r.animating||(r.animating=!0,r.onTranslateToWrapperTransitionEnd||(r.onTranslateToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd),r.onTranslateToWrapperTransitionEnd=null,delete r.onTranslateToWrapperTransitionEnd,a&&r.emit("transitionEnd"))}),r.$wrapperEl[0].addEventListener("transitionend",r.onTranslateToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onTranslateToWrapperTransitionEnd))),!0}},transition:{setTransition:function(e,t){this.params.cssMode||this.$wrapperEl.transition(e),this.emit("setTransition",e,t)},transitionStart:function(e,t){void 0===e&&(e=!0);var a=this["params"];a.cssMode||(a.autoHeight&&this.updateAutoHeight(),x({swiper:this,runCallbacks:e,direction:t,step:"Start"}))},transitionEnd:function(e,t){void 0===e&&(e=!0);var a=this["params"];this.animating=!1,a.cssMode||(this.setTransition(0),x({swiper:this,runCallbacks:e,direction:t,step:"End"}))}},slide:{slideTo:function(e,t,a,p,s){if(void 0===t&&(t=this.params.speed),void 0===a&&(a=!0),"number"!=typeof(e=void 0===e?0:e)&&"string"!=typeof e)throw new Error(`The 'index' argument cannot have type other than 'number' or 'string'. [${typeof e}] given.`);if("string"==typeof e){var i=parseInt(e,10);if(!isFinite(i))throw new Error(`The passed-in 'index' (string) couldn't be converted to 'number'. [${e}] given.`);e=i}const r=this;let n=e;n<0&&(n=0);const{params:l,snapGrid:c,slidesGrid:u,previousIndex:h,activeIndex:m,rtlTranslate:f,wrapperEl:v,enabled:g}=r;if(r.animating&&l.preventInteractionOnTransition||!g&&!p&&!s)return!1;let w=(i=Math.min(r.params.slidesPerGroupSkip,n))+Math.floor((n-i)/r.params.slidesPerGroup);w>=c.length&&(w=c.length-1),(m||l.initialSlide||0)===(h||0)&&a&&r.emit("beforeSlideChangeStart");var o=-c[w];if(r.updateProgress(o),l.normalizeSlideIndex)for(let e=0;e<u.length;e+=1){var b=-Math.floor(100*o),x=Math.floor(100*u[e]),y=Math.floor(100*u[e+1]);void 0!==u[e+1]?x<=b&&b<y-(y-x)/2?n=e:x<=b&&b<y&&(n=e+1):x<=b&&(n=e)}if(r.initialized&&n!==m){if(!r.allowSlideNext&&o<r.translate&&o<r.minTranslate())return!1;if(!r.allowSlidePrev&&o>r.translate&&o>r.maxTranslate()&&(m||0)!==n)return!1}let d;if(d=n>m?"next":n<m?"prev":"reset",f&&-o===r.translate||!f&&o===r.translate)return r.updateActiveIndex(n),l.autoHeight&&r.updateAutoHeight(),r.updateSlidesClasses(),"slide"!==l.effect&&r.setTranslate(o),"reset"!==d&&(r.transitionStart(a,d),r.transitionEnd(a,d)),!1;if(l.cssMode){e=r.isHorizontal(),s=f?o:-o;if(0===t){i=r.virtual&&r.params.virtual.enabled;i&&(r.wrapperEl.style.scrollSnapType="none",r._immediateVirtual=!0),v[e?"scrollLeft":"scrollTop"]=s,i&&requestAnimationFrame(()=>{r.wrapperEl.style.scrollSnapType="",r._swiperImmediateVirtual=!1})}else{if(!r.support.smoothScroll)return E({swiper:r,targetPosition:s,side:e?"left":"top"}),!0;v.scrollTo({[e?"left":"top"]:s,behavior:"smooth"})}return!0}return r.setTransition(t),r.setTranslate(o),r.updateActiveIndex(n),r.updateSlidesClasses(),r.emit("beforeTransitionStart",t,p),r.transitionStart(a,d),0===t?r.transitionEnd(a,d):r.animating||(r.animating=!0,r.onSlideToWrapperTransitionEnd||(r.onSlideToWrapperTransitionEnd=function(e){r&&!r.destroyed&&e.target===this&&(r.$wrapperEl[0].removeEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].removeEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd),r.onSlideToWrapperTransitionEnd=null,delete r.onSlideToWrapperTransitionEnd,r.transitionEnd(a,d))}),r.$wrapperEl[0].addEventListener("transitionend",r.onSlideToWrapperTransitionEnd),r.$wrapperEl[0].addEventListener("webkitTransitionEnd",r.onSlideToWrapperTransitionEnd)),!0},slideToLoop:function(e,t,a,s){void 0===t&&(t=this.params.speed),void 0===a&&(a=!0);let i=e=void 0===e?0:e;return this.params.loop&&(i+=this.loopedSlides),this.slideTo(i,t,a,s)},slideNext:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s=this,{animating:i,enabled:r,params:n}=s;if(!r)return s;let l=n.slidesPerGroup;if("auto"===n.slidesPerView&&1===n.slidesPerGroup&&n.slidesPerGroupAuto&&(l=Math.max(s.slidesPerViewDynamic("current",!0),1)),r=s.activeIndex<n.slidesPerGroupSkip?1:l,n.loop){if(i&&n.loopPreventsSlide)return!1;s.loopFix(),s._clientLeft=s.$wrapperEl[0].clientLeft}return n.rewind&&s.isEnd?s.slideTo(0,e,t,a):s.slideTo(s.activeIndex+r,e,t,a)},slidePrev:function(e,t,a){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0);var s,i=this;const{params:r,animating:p,snapGrid:n,slidesGrid:c,rtlTranslate:u,enabled:h}=i;if(!h)return i;if(r.loop){if(p&&r.loopPreventsSlide)return!1;i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft}function l(e){return e<0?-Math.floor(Math.abs(e)):Math.floor(e)}const m=l(u?i.translate:-i.translate),f=n.map(e=>l(e));let o=n[f.indexOf(m)-1];if(void 0===o&&r.cssMode){let a;n.forEach((e,t)=>{m>=e&&(a=t)}),void 0!==a&&(o=n[0<a?a-1:a])}let d=0;return void 0!==o&&((d=c.indexOf(o))<0&&(d=i.activeIndex-1),"auto"===r.slidesPerView&&1===r.slidesPerGroup&&r.slidesPerGroupAuto&&(d=d-i.slidesPerViewDynamic("previous",!0)+1,d=Math.max(d,0))),r.rewind&&i.isBeginning?(s=i.params.virtual&&i.params.virtual.enabled&&i.virtual?i.virtual.slides.length-1:i.slides.length-1,i.slideTo(s,e,t,a)):i.slideTo(d,e,t,a)},slideReset:function(e,t,a){return void 0===e&&(e=this.params.speed),this.slideTo(this.activeIndex,e,t=void 0===t?!0:t,a)},slideToClosest:function(e,t,a,s){void 0===e&&(e=this.params.speed),void 0===t&&(t=!0),void 0===s&&(s=.5);var i=this;let r=i.activeIndex;var n,l=(l=Math.min(i.params.slidesPerGroupSkip,r))+Math.floor((r-l)/i.params.slidesPerGroup),o=i.rtlTranslate?i.translate:-i.translate;return o>=i.snapGrid[l]?(n=i.snapGrid[l],(i.snapGrid[l+1]-n)*s<o-n&&(r+=i.params.slidesPerGroup)):o-(n=i.snapGrid[l-1])<=(i.snapGrid[l]-n)*s&&(r-=i.params.slidesPerGroup),r=Math.max(r,0),r=Math.min(r,i.slidesGrid.length-1),i.slideTo(r,e,t,a)},slideToClickedSlide:function(){const e=this,{params:t,$wrapperEl:a}=e;var s,i="auto"===t.slidesPerView?e.slidesPerViewDynamic():t.slidesPerView;let r=e.clickedIndex;t.loop?e.animating||(s=parseInt(I(e.clickedSlide).attr("data-swiper-slide-index"),10),t.centeredSlides?r<e.loopedSlides-i/2||r>e.slides.length-e.loopedSlides+i/2?(e.loopFix(),r=a.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),C(()=>{e.slideTo(r)})):e.slideTo(r):r>e.slides.length-i?(e.loopFix(),r=a.children(`.${t.slideClass}[data-swiper-slide-index="${s}"]:not(.${t.slideDuplicateClass})`).eq(0).index(),C(()=>{e.slideTo(r)})):e.slideTo(r)):e.slideTo(r)}},loop:{loopCreate:function(){const s=this,t=T(),{params:a,$wrapperEl:e}=s,i=0<e.children().length?I(e.children()[0].parentNode):e;i.children(`.${a.slideClass}.`+a.slideDuplicateClass).remove();let r=i.children("."+a.slideClass);if(a.loopFillGroupWithBlank){var n=a.slidesPerGroup-r.length%a.slidesPerGroup;if(n!==a.slidesPerGroup){for(let e=0;e<n;e+=1){var l=I(t.createElement("div")).addClass(a.slideClass+" "+a.slideBlankClass);i.append(l)}r=i.children("."+a.slideClass)}}"auto"!==a.slidesPerView||a.loopedSlides||(a.loopedSlides=r.length),s.loopedSlides=Math.ceil(parseFloat(a.loopedSlides||a.slidesPerView,10)),s.loopedSlides+=a.loopAdditionalSlides,s.loopedSlides>r.length&&(s.loopedSlides=r.length);const o=[],d=[];r.each((e,t)=>{const a=I(e);t<s.loopedSlides&&d.push(e),t<r.length&&t>=r.length-s.loopedSlides&&o.push(e),a.attr("data-swiper-slide-index",t)});for(let e=0;e<d.length;e+=1)i.append(I(d[e].cloneNode(!0)).addClass(a.slideDuplicateClass));for(let e=o.length-1;0<=e;--e)i.prepend(I(o[e].cloneNode(!0)).addClass(a.slideDuplicateClass))},loopFix:function(){var e=this,{activeIndex:t,slides:a,loopedSlides:s,allowSlidePrev:i,allowSlideNext:r,snapGrid:n,rtlTranslate:l}=(e.emit("beforeLoopFix"),e);let o;e.allowSlidePrev=!0,e.allowSlideNext=!0,n=-n[t]-e.getTranslate(),t<s?(o=a.length-3*s+t,o+=s,e.slideTo(o,0,!1,!0)&&0!=n&&e.setTranslate((l?-e.translate:e.translate)-n)):t>=a.length-s&&(o=-a.length+t+s,o+=s,e.slideTo(o,0,!1,!0)&&0!=n&&e.setTranslate((l?-e.translate:e.translate)-n)),e.allowSlidePrev=i,e.allowSlideNext=r,e.emit("loopFix")},loopDestroy:function(){const{$wrapperEl:e,params:t,slides:a}=this;e.children(`.${t.slideClass}.${t.slideDuplicateClass},.${t.slideClass}.`+t.slideBlankClass).remove(),a.removeAttr("data-swiper-slide-index")}},grabCursor:{setGrabCursor:function(e){var t=this;if(!(t.support.touch||!t.params.simulateTouch||t.params.watchOverflow&&t.isLocked||t.params.cssMode)){const a="container"===t.params.touchEventsTarget?t.el:t.wrapperEl;a.style.cursor="move",a.style.cursor=e?"grabbing":"grab"}},unsetGrabCursor:function(){var e=this;e.support.touch||e.params.watchOverflow&&e.isLocked||e.params.cssMode||(e["container"===e.params.touchEventsTarget?"el":"wrapperEl"].style.cursor="")}},events:{attachEvents:function(){var e=this;const t=T();var{params:a,support:s}=e;e.onTouchStart=function(e){var s=this;const i=T();var r=O();const n=s.touchEventsData,{params:l,touches:o,enabled:t}=s;if(t&&(!s.animating||!l.preventInteractionOnTransition)){!s.animating&&l.cssMode&&l.loop&&s.loopFix();let t=e,a=I((t=t.originalEvent?t.originalEvent:t).target);if(("wrapper"!==l.touchEventsTarget||a.closest(s.wrapperEl).length)&&(n.isTouchEvent="touchstart"===t.type,(n.isTouchEvent||!("which"in t)||3!==t.which)&&!(!n.isTouchEvent&&"button"in t&&0<t.button||n.isTouched&&n.isMoved))){!!l.noSwipingClass&&""!==l.noSwipingClass&&t.target&&t.target.shadowRoot&&e.path&&e.path[0]&&(a=I(e.path[0]));var d=l.noSwipingSelector||"."+l.noSwipingClass,p=!(!t.target||!t.target.shadowRoot);if(l.noSwiping&&(p?y(d,t.target):a.closest(d)[0]))s.allowClick=!0;else if(!l.swipeHandler||a.closest(l.swipeHandler)[0]){o.currentX=("touchstart"===t.type?t.targetTouches[0]:t).pageX,o.currentY=("touchstart"===t.type?t.targetTouches[0]:t).pageY;var p=o.currentX,d=o.currentY,c=l.edgeSwipeDetection||l.iOSEdgeSwipeDetection,u=l.edgeSwipeThreshold||l.iOSEdgeSwipeThreshold;if(c&&(p<=u||p>=r.innerWidth-u)){if("prevent"!==c)return;e.preventDefault()}if(Object.assign(n,{isTouched:!0,isMoved:!1,allowTouchCallbacks:!0,isScrolling:void 0,startMoving:void 0}),o.startX=p,o.startY=d,n.touchStartTime=g(),s.allowClick=!0,s.updateSize(),s.swipeDirection=void 0,0<l.threshold&&(n.allowThresholdMove=!1),"touchstart"!==t.type){let e=!0;a.is(n.focusableElements)&&(e=!1,"SELECT"===a[0].nodeName&&(n.isTouched=!1)),i.activeElement&&I(i.activeElement).is(n.focusableElements)&&i.activeElement!==a[0]&&i.activeElement.blur();r=e&&s.allowTouchMove&&l.touchStartPreventDefault;!l.touchStartForcePreventDefault&&!r||a[0].isContentEditable||t.preventDefault()}s.params.freeMode&&s.params.freeMode.enabled&&s.freeMode&&s.animating&&!l.cssMode&&s.freeMode.onTouchStart(),s.emit("touchStart",t)}}}}.bind(e),e.onTouchMove=function(e){var i=T(),r=this;const n=r.touchEventsData,{params:l,touches:o,rtlTranslate:d,enabled:t}=r;if(t){let s=e;if(s.originalEvent&&(s=s.originalEvent),n.isTouched){if(!n.isTouchEvent||"touchmove"===s.type){var e="touchmove"===s.type&&s.targetTouches&&(s.targetTouches[0]||s.changedTouches[0]),p=("touchmove"===s.type?e:s).pageX,e=("touchmove"===s.type?e:s).pageY;if(s.preventedByNestedSwiper)return o.startX=p,void(o.startY=e);if(!r.allowTouchMove)return I(s.target).is(n.focusableElements)||(r.allowClick=!1),void(n.isTouched&&(Object.assign(o,{startX:p,startY:e,currentX:p,currentY:e}),n.touchStartTime=g()));if(n.isTouchEvent&&l.touchReleaseOnEdges&&!l.loop)if(r.isVertical()){if(e<o.startY&&r.translate<=r.maxTranslate()||e>o.startY&&r.translate>=r.minTranslate())return n.isTouched=!1,void(n.isMoved=!1)}else if(p<o.startX&&r.translate<=r.maxTranslate()||p>o.startX&&r.translate>=r.minTranslate())return;if(n.isTouchEvent&&i.activeElement&&s.target===i.activeElement&&I(s.target).is(n.focusableElements))return n.isMoved=!0,void(r.allowClick=!1);if(n.allowTouchCallbacks&&r.emit("touchMove",s),!(s.targetTouches&&1<s.targetTouches.length)){o.currentX=p,o.currentY=e;i=o.currentX-o.startX,p=o.currentY-o.startY;if(!(r.params.threshold&&Math.sqrt(i**2+p**2)<r.params.threshold))if(void 0===n.isScrolling&&(r.isHorizontal()&&o.currentY===o.startY||r.isVertical()&&o.currentX===o.startX?n.isScrolling=!1:25<=i*i+p*p&&(e=180*Math.atan2(Math.abs(p),Math.abs(i))/Math.PI,n.isScrolling=r.isHorizontal()?e>l.touchAngle:90-e>l.touchAngle)),n.isScrolling&&r.emit("touchMoveOpposite",s),void 0===n.startMoving&&(o.currentX===o.startX&&o.currentY===o.startY||(n.startMoving=!0)),n.isScrolling)n.isTouched=!1;else if(n.startMoving){r.allowClick=!1,!l.cssMode&&s.cancelable&&s.preventDefault(),l.touchMoveStopPropagation&&!l.nested&&s.stopPropagation(),n.isMoved||(l.loop&&!l.cssMode&&r.loopFix(),n.startTranslate=r.getTranslate(),r.setTransition(0),r.animating&&r.$wrapperEl.trigger("webkitTransitionEnd transitionend"),n.allowMomentumBounce=!1,!l.grabCursor||!0!==r.allowSlideNext&&!0!==r.allowSlidePrev||r.setGrabCursor(!0),r.emit("sliderFirstMove",s)),r.emit("sliderMove",s),n.isMoved=!0;let e=r.isHorizontal()?i:p,t=(o.diff=e,e*=l.touchRatio,d&&(e=-e),r.swipeDirection=0<e?"prev":"next",n.currentTranslate=e+n.startTranslate,!0),a=l.resistanceRatio;if(l.touchReleaseOnEdges&&(a=0),0<e&&n.currentTranslate>r.minTranslate()?(t=!1,l.resistance&&(n.currentTranslate=r.minTranslate()-1+(-r.minTranslate()+n.startTranslate+e)**a)):e<0&&n.currentTranslate<r.maxTranslate()&&(t=!1,l.resistance&&(n.currentTranslate=r.maxTranslate()+1-(r.maxTranslate()-n.startTranslate-e)**a)),t&&(s.preventedByNestedSwiper=!0),!r.allowSlideNext&&"next"===r.swipeDirection&&n.currentTranslate<n.startTranslate&&(n.currentTranslate=n.startTranslate),!r.allowSlidePrev&&"prev"===r.swipeDirection&&n.currentTranslate>n.startTranslate&&(n.currentTranslate=n.startTranslate),r.allowSlidePrev||r.allowSlideNext||(n.currentTranslate=n.startTranslate),0<l.threshold){if(!(Math.abs(e)>l.threshold||n.allowThresholdMove))return void(n.currentTranslate=n.startTranslate);if(!n.allowThresholdMove)return n.allowThresholdMove=!0,o.startX=o.currentX,o.startY=o.currentY,n.currentTranslate=n.startTranslate,void(o.diff=r.isHorizontal()?o.currentX-o.startX:o.currentY-o.startY)}l.followFinger&&!l.cssMode&&((l.freeMode&&l.freeMode.enabled&&r.freeMode||l.watchSlidesProgress)&&(r.updateActiveIndex(),r.updateSlidesClasses()),r.params.freeMode&&l.freeMode.enabled&&r.freeMode&&r.freeMode.onTouchMove(),r.updateProgress(n.currentTranslate),r.setTranslate(n.currentTranslate))}}}}else n.startMoving&&n.isScrolling&&r.emit("touchMoveOpposite",s)}}.bind(e),e.onTouchEnd=function(n){const l=this,e=l.touchEventsData;var{params:o,touches:t,rtlTranslate:a,slidesGrid:d,enabled:s}=l;if(s){let i=n;if(i.originalEvent&&(i=i.originalEvent),e.allowTouchCallbacks&&l.emit("touchEnd",i),e.allowTouchCallbacks=!1,!e.isTouched)return e.isMoved&&o.grabCursor&&l.setGrabCursor(!1),e.isMoved=!1,void(e.startMoving=!1);o.grabCursor&&e.isMoved&&e.isTouched&&(!0===l.allowSlideNext||!0===l.allowSlidePrev)&&l.setGrabCursor(!1);s=g(),n=s-e.touchStartTime;if(l.allowClick&&(p=i.path||i.composedPath&&i.composedPath(),l.updateClickedSlide(p&&p[0]||i.target),l.emit("tap click",i),n<300&&s-e.lastClickTime<300&&l.emit("doubleTap doubleClick",i)),e.lastClickTime=g(),C(()=>{l.destroyed||(l.allowClick=!0)}),!e.isTouched||!e.isMoved||!l.swipeDirection||0===t.diff||e.currentTranslate===e.startTranslate)return e.isTouched=!1,e.isMoved=!1,void(e.startMoving=!1);e.isTouched=!1,e.isMoved=!1,e.startMoving=!1;let r;if(r=o.followFinger?a?l.translate:-l.translate:-e.currentTranslate,!o.cssMode)if(l.params.freeMode&&o.freeMode.enabled)l.freeMode.onTouchEnd({currentPos:r});else{let t=0,a=l.slidesSizesGrid[0];for(let e=0;e<d.length;e+=e<o.slidesPerGroupSkip?1:o.slidesPerGroup){const c=e<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;void 0!==d[e+c]?r>=d[e]&&r<d[e+c]&&(t=e,a=d[e+c]-d[e]):r>=d[e]&&(t=e,a=d[d.length-1]-d[d.length-2])}let e=null,s=null;o.rewind&&(l.isBeginning?s=l.params.virtual&&l.params.virtual.enabled&&l.virtual?l.virtual.slides.length-1:l.slides.length-1:l.isEnd&&(e=0));var p=(r-d[t])/a;const c=t<o.slidesPerGroupSkip-1?1:o.slidesPerGroup;n>o.longSwipesMs?o.longSwipes?("next"===l.swipeDirection&&(p>=o.longSwipesRatio?l.slideTo(o.rewind&&l.isEnd?e:t+c):l.slideTo(t)),"prev"===l.swipeDirection&&(p>1-o.longSwipesRatio?l.slideTo(t+c):null!==s&&p<0&&Math.abs(p)>o.longSwipesRatio?l.slideTo(s):l.slideTo(t))):l.slideTo(l.activeIndex):o.shortSwipes?l.navigation&&(i.target===l.navigation.nextEl||i.target===l.navigation.prevEl)?i.target===l.navigation.nextEl?l.slideTo(t+c):l.slideTo(t):("next"===l.swipeDirection&&l.slideTo(null!==e?e:t+c),"prev"===l.swipeDirection&&l.slideTo(null!==s?s:t)):l.slideTo(l.activeIndex)}}}.bind(e),a.cssMode&&(e.onScroll=function(){var t=this,{wrapperEl:a,rtlTranslate:s,enabled:i}=t;if(i){t.previousTranslate=t.translate,t.isHorizontal()?t.translate=-a.scrollLeft:t.translate=-a.scrollTop,0===t.translate&&(t.translate=0),t.updateActiveIndex(),t.updateSlidesClasses();let e;i=t.maxTranslate()-t.minTranslate();(e=0==i?0:(t.translate-t.minTranslate())/i)!==t.progress&&t.updateProgress(s?-t.translate:t.translate),t.emit("setTranslate",t.translate,!1)}}.bind(e)),e.onClick=function(e){var t=this;t.enabled&&(t.allowClick||(t.params.preventClicks&&e.preventDefault(),t.params.preventClicksPropagation&&t.animating&&(e.stopPropagation(),e.stopImmediatePropagation())))}.bind(e),s.touch&&!M&&(t.addEventListener("touchstart",$),M=!0),P(e,"on")},detachEvents:function(){P(this,"off")}},breakpoints:{setBreakpoint:function(){var e=this;const{activeIndex:t,initialized:a,loopedSlides:p=0,params:s,$el:i}=e;var r,n,l,o,d=s.breakpoints;!d||0===Object.keys(d).length||(r=e.getBreakpoint(d,e.params.breakpointsBase,e.el))&&e.currentBreakpoint!==r&&(d=(r in d?d[r]:void 0)||e.originalParams,o=k(e,s),l=k(e,d),n=s.enabled,o&&!l?(i.removeClass(`${s.containerModifierClass}grid ${s.containerModifierClass}grid-column`),e.emitContainerClasses()):!o&&l&&(i.addClass(s.containerModifierClass+"grid"),(d.grid.fill&&"column"===d.grid.fill||!d.grid.fill&&"column"===s.grid.fill)&&i.addClass(s.containerModifierClass+"grid-column"),e.emitContainerClasses()),o=d.direction&&d.direction!==s.direction,l=s.loop&&(d.slidesPerView!==s.slidesPerView||o),o&&a&&e.changeDirection(),c(e.params,d),o=e.params.enabled,Object.assign(e,{allowTouchMove:e.params.allowTouchMove,allowSlideNext:e.params.allowSlideNext,allowSlidePrev:e.params.allowSlidePrev}),n&&!o?e.disable():!n&&o&&e.enable(),e.currentBreakpoint=r,e.emit("_beforeBreakpoint",d),l&&a&&(e.loopDestroy(),e.loopCreate(),e.updateSlides(),e.slideTo(t-p+e.loopedSlides,0,!1)),e.emit("breakpoint",d))},getBreakpoint:function(e,a,s){if(void 0===a&&(a="window"),e&&("container"!==a||s)){let t=!1;const n=O(),l="window"===a?n.innerHeight:s.clientHeight,o=Object.keys(e).map(e=>{var t;return"string"==typeof e&&0===e.indexOf("@")?(t=parseFloat(e.substr(1)),{value:l*t,point:e}):{value:e,point:e}});o.sort((e,t)=>parseInt(e.value,10)-parseInt(t.value,10));for(let e=0;e<o.length;e+=1){var{point:i,value:r}=o[e];"window"===a?n.matchMedia(`(min-width: ${r}px)`).matches&&(t=i):r<=s.clientWidth&&(t=i)}return t||"max"}}},checkOverflow:{checkOverflow:function(){var e,t=this,{isLocked:a,params:s}=t,i=s["slidesOffsetBefore"];i?(e=t.slides.length-1,e=t.slidesGrid[e]+t.slidesSizesGrid[e]+2*i,t.isLocked=t.size>e):t.isLocked=1===t.snapGrid.length,!0===s.allowSlideNext&&(t.allowSlideNext=!t.isLocked),!0===s.allowSlidePrev&&(t.allowSlidePrev=!t.isLocked),a&&a!==t.isLocked&&(t.isEnd=!1),a!==t.isLocked&&t.emit(t.isLocked?"lock":"unlock")}},classes:{addClasses:function(){const{classNames:e,params:t,rtl:a,$el:s,device:i,support:r}=this;var n=function(e,a){const s=[];return e.forEach(t=>{"object"==typeof t?Object.keys(t).forEach(e=>{t[e]&&s.push(a+e)}):"string"==typeof t&&s.push(a+t)}),s}(["initialized",t.direction,{"pointer-events":!r.touch},{"free-mode":this.params.freeMode&&t.freeMode.enabled},{autoheight:t.autoHeight},{rtl:a},{grid:t.grid&&1<t.grid.rows},{"grid-column":t.grid&&1<t.grid.rows&&"column"===t.grid.fill},{android:i.android},{ios:i.ios},{"css-mode":t.cssMode},{centered:t.cssMode&&t.centeredSlides}],t.containerModifierClass);e.push(...n),s.addClass([...e].join(" ")),this.emitContainerClasses()},removeClasses:function(){const{$el:e,classNames:t}=this;e.removeClass(t.join(" ")),this.emitContainerClasses()}},images:{loadImage:function(e,t,a,s,i,r){const n=O();let l;function o(){r&&r()}!(I(e).parent("picture")[0]||e.complete&&i)&&t?((l=new n.Image).onload=o,l.onerror=o,s&&(l.sizes=s),a&&(l.srcset=a),t&&(l.src=t)):o()},preloadImages:function(){const t=this;function a(){void 0!==t&&null!==t&&t&&!t.destroyed&&(void 0!==t.imagesLoaded&&(t.imagesLoaded+=1),t.imagesLoaded===t.imagesToLoad.length&&(t.params.updateOnImagesReady&&t.update(),t.emit("imagesReady")))}t.imagesToLoad=t.$el.find("img");for(let e=0;e<t.imagesToLoad.length;e+=1){const s=t.imagesToLoad[e];t.loadImage(s,s.currentSrc||s.getAttribute("src"),s.srcset||s.getAttribute("srcset"),s.sizes||s.getAttribute("sizes"),!0,a)}}}},D={};class p{constructor(){let e,t;for(var a=arguments.length,s=new Array(a),i=0;i<a;i++)s[i]=arguments[i];if(1===s.length&&s[0].constructor&&"Object"===Object.prototype.toString.call(s[0]).slice(8,-1)?t=s[0]:[e,t]=s,t=c({},t=t||{}),e&&!t.el&&(t.el=e),t.el&&1<I(t.el).length){const o=[];return I(t.el).each(e=>{e=c({},t,{el:e});o.push(new p(e))}),o}const r=this,d=(r.__swiper__=!0,r.support=h(),r.device=f({userAgent:t.userAgent}),r.browser=v=v||w(),r.eventsListeners={},r.eventsAnyListeners=[],r.modules=[...r.__modules__],t.modules&&Array.isArray(t.modules)&&r.modules.push(...t.modules),{});r.modules.forEach(e=>{var s,i;e({swiper:r,extendParams:(s=t,i=d,function(e){void 0===e&&(e={});var t=Object.keys(e)[0],a=e[t];"object"==typeof a&&null!==a&&(0<=["navigation","pagination","scrollbar"].indexOf(t)&&!0===s[t]&&(s[t]={auto:!0}),t in s&&"enabled"in a&&(!0===s[t]&&(s[t]={enabled:!0}),"object"!=typeof s[t]||"enabled"in s[t]||(s[t].enabled=!0),s[t]||(s[t]={enabled:!1}))),c(i,e)}),on:r.on.bind(r),once:r.once.bind(r),off:r.off.bind(r),emit:r.emit.bind(r)})});var n,l=c({},z,d);return r.params=c({},l,D,t),r.originalParams=c({},r.params),r.passedParams=c({},t),r.params&&r.params.on&&Object.keys(r.params.on).forEach(e=>{r.on(e,r.params.on[e])}),r.params&&r.params.onAny&&r.onAny(r.params.onAny),r.$=I,Object.assign(r,{enabled:r.params.enabled,el:e,classNames:[],slides:I(),slidesGrid:[],snapGrid:[],slidesSizesGrid:[],isHorizontal(){return"horizontal"===r.params.direction},isVertical(){return"vertical"===r.params.direction},activeIndex:0,realIndex:0,isBeginning:!0,isEnd:!1,translate:0,previousTranslate:0,progress:0,velocity:0,animating:!1,allowSlideNext:r.params.allowSlideNext,allowSlidePrev:r.params.allowSlidePrev,touchEvents:(l=["touchstart","touchmove","touchend","touchcancel"],n=["pointerdown","pointermove","pointerup"],r.touchEventsTouch={start:l[0],move:l[1],end:l[2],cancel:l[3]},r.touchEventsDesktop={start:n[0],move:n[1],end:n[2]},r.support.touch||!r.params.simulateTouch?r.touchEventsTouch:r.touchEventsDesktop),touchEventsData:{isTouched:void 0,isMoved:void 0,allowTouchCallbacks:void 0,touchStartTime:void 0,isScrolling:void 0,currentTranslate:void 0,startTranslate:void 0,allowThresholdMove:void 0,focusableElements:r.params.focusableElements,lastClickTime:g(),clickTimeout:void 0,velocities:[],allowMomentumBounce:void 0,isTouchEvent:void 0,startMoving:void 0},allowClick:!0,allowTouchMove:r.params.allowTouchMove,touches:{startX:0,startY:0,currentX:0,currentY:0,diff:0},imagesToLoad:[],imagesLoaded:0}),r.emit("_swiper"),r.params.init&&r.init(),r}enable(){var e=this;e.enabled||(e.enabled=!0,e.params.grabCursor&&e.setGrabCursor(),e.emit("enable"))}disable(){var e=this;e.enabled&&(e.enabled=!1,e.params.grabCursor&&e.unsetGrabCursor(),e.emit("disable"))}setProgress(e,t){var a=this,s=(e=Math.min(Math.max(e,0),1),a.minTranslate()),i=a.maxTranslate();a.translateTo((i-s)*e+s,void 0===t?0:t),a.updateActiveIndex(),a.updateSlidesClasses()}emitContainerClasses(){const t=this;if(t.params._emitClasses&&t.el){const e=t.el.className.split(" ").filter(e=>0===e.indexOf("swiper")||0===e.indexOf(t.params.containerModifierClass));t.emit("_containerClasses",e.join(" "))}}getSlideClasses(e){const t=this;return e.className.split(" ").filter(e=>0===e.indexOf("swiper-slide")||0===e.indexOf(t.params.slideClass)).join(" ")}emitSlidesClasses(){const a=this;if(a.params._emitClasses&&a.el){const s=[];a.slides.each(e=>{var t=a.getSlideClasses(e);s.push({slideEl:e,classNames:t}),a.emit("_slideClass",e,t)}),a.emit("_slideClasses",s)}}slidesPerViewDynamic(e,t){void 0===e&&(e="current"),void 0===t&&(t=!1);var{params:a,slides:s,slidesGrid:i,slidesSizesGrid:r,size:n,activeIndex:l}=this;let o=1;if(a.centeredSlides){let t=s[l].swiperSlideSize,a;for(let e=l+1;e<s.length;e+=1)s[e]&&!a&&(t+=s[e].swiperSlideSize,o+=1,t>n&&(a=!0));for(let e=l-1;0<=e;--e)s[e]&&!a&&(t+=s[e].swiperSlideSize,o+=1,t>n&&(a=!0))}else if("current"===e)for(let e=l+1;e<s.length;e+=1)(t?i[e]+r[e]-i[l]<n:i[e]-i[l]<n)&&(o+=1);else for(let e=l-1;0<=e;--e)i[l]-i[e]<n&&(o+=1);return o}update(){const t=this;if(t&&!t.destroyed){var{snapGrid:a,params:s}=t;s.breakpoints&&t.setBreakpoint(),t.updateSize(),t.updateSlides(),t.updateProgress(),t.updateSlidesClasses();let e;function i(){var e=t.rtlTranslate?-1*t.translate:t.translate,e=Math.min(Math.max(e,t.maxTranslate()),t.minTranslate());t.setTranslate(e),t.updateActiveIndex(),t.updateSlidesClasses()}t.params.freeMode&&t.params.freeMode.enabled?(i(),t.params.autoHeight&&t.updateAutoHeight()):(e=("auto"===t.params.slidesPerView||1<t.params.slidesPerView)&&t.isEnd&&!t.params.centeredSlides?t.slideTo(t.slides.length-1,0,!1,!0):t.slideTo(t.activeIndex,0,!1,!0))||i(),s.watchOverflow&&a!==t.snapGrid&&t.checkOverflow(),t.emit("update")}}changeDirection(t,e){void 0===e&&(e=!0);var a=this,s=a.params.direction;return(t=t||("horizontal"===s?"vertical":"horizontal"))===s||"horizontal"!==t&&"vertical"!==t||(a.$el.removeClass(""+a.params.containerModifierClass+s).addClass(""+a.params.containerModifierClass+t),a.emitContainerClasses(),a.params.direction=t,a.slides.each(e=>{"vertical"===t?e.style.width="":e.style.height=""}),a.emit("changeDirection"),e&&a.update()),a}mount(t){const e=this;if(e.mounted)return!0;const a=I(t||e.params.el);if(!(t=a[0]))return!1;t.swiper=e;const s=()=>"."+(e.params.wrapperClass||"").trim().split(" ").join(".");let i=(()=>{if(t&&t.shadowRoot&&t.shadowRoot.querySelector){const e=I(t.shadowRoot.querySelector(s()));return e.children=e=>a.children(e),e}return a.children(s())})();if(0===i.length&&e.params.createElements){const r=T(),n=r.createElement("div");i=I(n),n.className=e.params.wrapperClass,a.append(n),a.children("."+e.params.slideClass).each(e=>{i.append(e)})}return Object.assign(e,{$el:a,el:t,$wrapperEl:i,wrapperEl:i[0],mounted:!0,rtl:"rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction"),rtlTranslate:"horizontal"===e.params.direction&&("rtl"===t.dir.toLowerCase()||"rtl"===a.css("direction")),wrongRTL:"-webkit-box"===i.css("display")}),!0}init(e){var t=this;return t.initialized||!1===t.mount(e)||(t.emit("beforeInit"),t.params.breakpoints&&t.setBreakpoint(),t.addClasses(),t.params.loop&&t.loopCreate(),t.updateSize(),t.updateSlides(),t.params.watchOverflow&&t.checkOverflow(),t.params.grabCursor&&t.enabled&&t.setGrabCursor(),t.params.preloadImages&&t.preloadImages(),t.params.loop?t.slideTo(t.params.initialSlide+t.loopedSlides,0,t.params.runCallbacksOnInit,!1,!0):t.slideTo(t.params.initialSlide,0,t.params.runCallbacksOnInit,!1,!0),t.attachEvents(),t.initialized=!0,t.emit("init"),t.emit("afterInit")),t}destroy(e,t){void 0===e&&(e=!0),void 0===t&&(t=!0);const a=this,{params:s,$el:i,$wrapperEl:r,slides:n}=a;if(void 0===a.params||a.destroyed)return null;if(a.emit("beforeDestroy"),a.initialized=!1,a.detachEvents(),s.loop&&a.loopDestroy(),t&&(a.removeClasses(),i.removeAttr("style"),r.removeAttr("style"),n&&n.length&&n.removeClass([s.slideVisibleClass,s.slideActiveClass,s.slideNextClass,s.slidePrevClass].join(" ")).removeAttr("style").removeAttr("data-swiper-slide-index")),a.emit("destroy"),Object.keys(a.eventsListeners).forEach(e=>{a.off(e)}),!1!==e){a.$el[0].swiper=null;{t=a;const l=t;Object.keys(l).forEach(e=>{try{l[e]=null}catch(e){}try{delete l[e]}catch(e){}})}}return a.destroyed=!0,null}static extendDefaults(e){c(D,e)}static get extendedDefaults(){return D}static get defaults(){return z}static installModule(e){p.prototype.__modules__||(p.prototype.__modules__=[]);const t=p.prototype.__modules__;"function"==typeof e&&t.indexOf(e)<0&&t.push(e)}static use(e){return Array.isArray(e)?e.forEach(e=>p.installModule(e)):p.installModule(e),p}}function G(a,s,i,r){const n=T();return a.params.createElements&&Object.keys(r).forEach(t=>{if(!i[t]&&!0===i.auto){let e=a.$el.children("."+r[t])[0];e||((e=n.createElement("div")).className=r[t],a.$el.append(e)),i[t]=e,s[t]=e}}),i}function b(e){return"."+(e=void 0===e?"":e).trim().replace(/([\.:!\/])/g,"\\$1").replace(/ /g,".")}function i(e){const{effect:a,swiper:s,on:t,setTranslate:i,setTransition:r,overwriteParams:n,perspective:l}=e;t("beforeInit",()=>{var e;s.params.effect===a&&(s.classNames.push(""+s.params.containerModifierClass+a),l&&l()&&s.classNames.push(s.params.containerModifierClass+"3d"),e=n?n():{},Object.assign(s.params,e),Object.assign(s.originalParams,e))}),t("setTranslate",()=>{s.params.effect===a&&i()}),t("setTransition",(e,t)=>{s.params.effect===a&&r(t)});let o;t("virtualUpdate",()=>{s.params.effect===a&&(s.slides.length||(o=!0),requestAnimationFrame(()=>{o&&s.slides&&s.slides.length&&(i(),o=!1)}))})}function B(e,t){return e.transformEl?t.find(e.transformEl).css({"backface-visibility":"hidden","-webkit-backface-visibility":"hidden"}):t}function N(e){let{swiper:a,duration:t,transformEl:s,allSlides:i}=e;const{slides:r,activeIndex:n,$wrapperEl:l}=a;if(a.params.virtualTranslate&&0!==t){let e=!1,t;(t=i?s?r.find(s):r:s?r.eq(n).find(s):r.eq(n)).transitionEnd(()=>{if(!e&&a&&!a.destroyed){e=!0,a.animating=!1;var t=["webkitTransitionEnd","transitionend"];for(let e=0;e<t.length;e+=1)l.trigger(t[e])}})}}function H(e,t,a){var s="swiper-slide-shadow"+(a?"-"+a:"");const i=e.transformEl?t.find(e.transformEl):t;let r=i.children("."+s);return r.length||(r=I(`<div class="swiper-slide-shadow${a?"-"+a:""}"></div>`),i.append(r)),r}return Object.keys(A).forEach(t=>{Object.keys(A[t]).forEach(e=>{p.prototype[e]=A[t][e]})}),p.use([function(e){let{swiper:r,on:t,emit:a}=e;const s=O();let i=null,n=null;const l=()=>{r&&!r.destroyed&&r.initialized&&(a("beforeResize"),a("resize"))},o=()=>{r&&!r.destroyed&&r.initialized&&a("orientationchange")};t("init",()=>{r.params.resizeObserver&&void 0!==s.ResizeObserver?r&&!r.destroyed&&r.initialized&&(i=new ResizeObserver(a=>{n=s.requestAnimationFrame(()=>{var{width:e,height:t}=r;let s=e,i=t;a.forEach(e=>{var{contentBoxSize:e,contentRect:t,target:a}=e;a&&a!==r.el||(s=t?t.width:(e[0]||e).inlineSize,i=t?t.height:(e[0]||e).blockSize)}),s===e&&i===t||l()})})).observe(r.el):(s.addEventListener("resize",l),s.addEventListener("orientationchange",o))}),t("destroy",()=>{n&&s.cancelAnimationFrame(n),i&&i.unobserve&&r.el&&(i.unobserve(r.el),i=null),s.removeEventListener("resize",l),s.removeEventListener("orientationchange",o)})},function(e){let{swiper:a,extendParams:t,on:s,emit:i}=e;function r(e,t){void 0===t&&(t={});const a=l.MutationObserver||l.WebkitMutationObserver,s=new a(e=>{var t;1!==e.length?(t=function(){i("observerUpdate",e[0])},l.requestAnimationFrame?l.requestAnimationFrame(t):l.setTimeout(t,0)):i("observerUpdate",e[0])});s.observe(e,{attributes:void 0===t.attributes||t.attributes,childList:void 0===t.childList||t.childList,characterData:void 0===t.characterData||t.characterData}),n.push(s)}const n=[],l=O();t({observer:!1,observeParents:!1,observeSlideChildren:!1}),s("init",()=>{if(a.params.observer){if(a.params.observeParents){var t=a.$el.parents();for(let e=0;e<t.length;e+=1)r(t[e])}r(a.$el[0],{childList:a.params.observeSlideChildren}),r(a.$wrapperEl[0],{attributes:!1})}}),s("destroy",()=>{n.forEach(e=>{e.disconnect()}),n.splice(0,n.length)})}]),p.use([function(e){let{swiper:x,extendParams:t,on:a,emit:y}=e;t({virtual:{enabled:!1,slides:[],cache:!0,renderSlide:null,renderExternal:null,renderExternalUpdate:!0,addSlidesBefore:0,addSlidesAfter:0}});let s;function E(e,t){const a=x.params.virtual;if(a.cache&&x.virtual.cache[t])return x.virtual.cache[t];const s=a.renderSlide?I(a.renderSlide.call(x,e,t)):I(`<div class="${x.params.slideClass}" data-swiper-slide-index="${t}">${e}</div>`);return s.attr("data-swiper-slide-index")||s.attr("data-swiper-slide-index",t),a.cache&&(x.virtual.cache[t]=s),s}function n(t){var{slidesPerView:e,slidesPerGroup:a,centeredSlides:s}=x.params,{addSlidesBefore:p,addSlidesAfter:c}=x.params.virtual;const{from:i,to:r,slides:n,slidesGrid:u,offset:h}=x.virtual;x.params.cssMode||x.updateActiveIndex();var m=x.activeIndex||0;let l;l=x.rtlTranslate?"right":x.isHorizontal()?"left":"top";let f,v;v=s?(f=Math.floor(e/2)+a+c,Math.floor(e/2)+a+p):(f=e+(a-1)+c,a+p);const o=Math.max((m||0)-v,0),d=Math.min((m||0)+f,n.length-1);s=(x.slidesGrid[o]||0)-(x.slidesGrid[0]||0);function g(){x.updateSlides(),x.updateProgress(),x.updateSlidesClasses(),x.lazy&&x.params.lazy.enabled&&x.lazy.load(),y("virtualUpdate")}if(Object.assign(x.virtual,{from:o,to:d,offset:s,slidesGrid:x.slidesGrid}),i===o&&r===d&&!t)return x.slidesGrid!==u&&s!==h&&x.slides.css(l,s+"px"),x.updateProgress(),void y("virtualUpdate");if(x.params.virtual.renderExternal)return x.params.virtual.renderExternal.call(x,{offset:s,from:o,to:d,slides:function(){const t=[];for(let e=o;e<=d;e+=1)t.push(n[e]);return t}()}),void(x.params.virtual.renderExternalUpdate?g():y("virtualUpdate"));const w=[],b=[];if(t)x.$wrapperEl.find("."+x.params.slideClass).remove();else for(let e=i;e<=r;e+=1)(e<o||e>d)&&x.$wrapperEl.find(`.${x.params.slideClass}[data-swiper-slide-index="${e}"]`).remove();for(let e=0;e<n.length;e+=1)e>=o&&e<=d&&(void 0===r||t?b.push(e):(e>r&&b.push(e),e<i&&w.push(e)));b.forEach(e=>{x.$wrapperEl.append(E(n[e],e))}),w.sort((e,t)=>t-e).forEach(e=>{x.$wrapperEl.prepend(E(n[e],e))}),x.$wrapperEl.children(".swiper-slide").css(l,s+"px"),g()}x.virtual={cache:{},from:void 0,to:void 0,slides:[],offset:0,slidesGrid:[]},a("beforeInit",()=>{x.params.virtual.enabled&&(x.virtual.slides=x.params.virtual.slides,x.classNames.push(x.params.containerModifierClass+"virtual"),x.params.watchSlidesProgress=!0,x.originalParams.watchSlidesProgress=!0,x.params.initialSlide||n())}),a("setTranslate",()=>{x.params.virtual.enabled&&(x.params.cssMode&&!x._immediateVirtual?(clearTimeout(s),s=setTimeout(()=>{n()},100)):n())}),a("init update resize",()=>{x.params.virtual.enabled&&x.params.cssMode&&W(x.wrapperEl,"--swiper-virtual-size",x.virtualSize+"px")}),Object.assign(x.virtual,{appendSlide:function(t){if("object"==typeof t&&"length"in t)for(let e=0;e<t.length;e+=1)t[e]&&x.virtual.slides.push(t[e]);else x.virtual.slides.push(t);n(!0)},prependSlide:function(t){var e=x.activeIndex;let a=e+1,s=1;if(Array.isArray(t)){for(let e=0;e<t.length;e+=1)t[e]&&x.virtual.slides.unshift(t[e]);a=e+t.length,s=t.length}else x.virtual.slides.unshift(t);if(x.params.virtual.cache){const i=x.virtual.cache,r={};Object.keys(i).forEach(e=>{const t=i[e];var a=t.attr("data-swiper-slide-index");a&&t.attr("data-swiper-slide-index",parseInt(a,10)+s),r[parseInt(e,10)+s]=t}),x.virtual.cache=r}n(!0),x.slideTo(a,0)},removeSlide:function(a){if(null!=a){let t=x.activeIndex;if(Array.isArray(a))for(let e=a.length-1;0<=e;--e)x.virtual.slides.splice(a[e],1),x.params.virtual.cache&&delete x.virtual.cache[a[e]],a[e]<t&&--t,t=Math.max(t,0);else x.virtual.slides.splice(a,1),x.params.virtual.cache&&delete x.virtual.cache[a],a<t&&--t,t=Math.max(t,0);n(!0),x.slideTo(t,0)}},removeAllSlides:function(){x.virtual.slides=[],x.params.virtual.cache&&(x.virtual.cache={}),n(!0),x.slideTo(0,0)},update:n})},function(e){let{swiper:v,extendParams:t,on:a,emit:g}=e;const w=T(),b=O();function s(t){if(v.enabled){var a=v["rtlTranslate"];let e=t;var t=(e=e.originalEvent?e.originalEvent:e).keyCode||e.charCode,s=v.params.keyboard.pageUpDown,i=s&&33===t,s=s&&34===t,r=37===t,n=39===t,l=38===t,o=40===t;if(!v.allowSlideNext&&(v.isHorizontal()&&n||v.isVertical()&&o||s))return!1;if(!v.allowSlidePrev&&(v.isHorizontal()&&r||v.isVertical()&&l||i))return!1;if(!(e.shiftKey||e.altKey||e.ctrlKey||e.metaKey||w.activeElement&&w.activeElement.nodeName&&("input"===w.activeElement.nodeName.toLowerCase()||"textarea"===w.activeElement.nodeName.toLowerCase()))){if(v.params.keyboard.onlyInViewport&&(i||s||r||n||l||o)){let t=!1;if(0<v.$el.parents("."+v.params.slideClass).length&&0===v.$el.parents("."+v.params.slideActiveClass).length)return;var c=v.$el,u=c[0].clientWidth,c=c[0].clientHeight,h=b.innerWidth,m=b.innerHeight;const p=v.$el.offset();a&&(p.left-=v.$el[0].scrollLeft);var f=[[p.left,p.top],[p.left+u,p.top],[p.left,p.top+c],[p.left+u,p.top+c]];for(let e=0;e<f.length;e+=1){var d=f[e];0<=d[0]&&d[0]<=h&&0<=d[1]&&d[1]<=m&&(0===d[0]&&0===d[1]||(t=!0))}if(!t)return}v.isHorizontal()?((i||s||r||n)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),((s||n)&&!a||(i||r)&&a)&&v.slideNext(),((i||r)&&!a||(s||n)&&a)&&v.slidePrev()):((i||s||l||o)&&(e.preventDefault?e.preventDefault():e.returnValue=!1),(s||o)&&v.slideNext(),(i||l)&&v.slidePrev()),g("keyPress",t)}}}function i(){v.keyboard.enabled||(I(w).on("keydown",s),v.keyboard.enabled=!0)}function r(){v.keyboard.enabled&&(I(w).off("keydown",s),v.keyboard.enabled=!1)}v.keyboard={enabled:!1},t({keyboard:{enabled:!1,onlyInViewport:!0,pageUpDown:!0}}),a("init",()=>{v.params.keyboard.enabled&&i()}),a("destroy",()=>{v.keyboard.enabled&&r()}),Object.assign(v.keyboard,{enable:i,disable:r})},function(r){let{swiper:p,extendParams:n,on:e,emit:c}=r;const l=O();n({mousewheel:{enabled:!1,releaseOnEdges:!1,invert:!1,forceToAxis:!1,sensitivity:1,eventsTarget:"container",thresholdDelta:null,thresholdTime:null}}),p.mousewheel={enabled:!1};let u,t=g(),h;const m=[];function o(){p.enabled&&(p.mouseEntered=!0)}function d(){p.enabled&&(p.mouseEntered=!1)}function f(e){if(!(p.params.mousewheel.thresholdDelta&&e.delta<p.params.mousewheel.thresholdDelta||p.params.mousewheel.thresholdTime&&g()-t<p.params.mousewheel.thresholdTime)){if(6<=e.delta&&g()-t<60)return 1;e.direction<0?p.isEnd&&!p.params.loop||p.animating||(p.slideNext(),c("scroll",e.raw)):p.isBeginning&&!p.params.loop||p.animating||(p.slidePrev(),c("scroll",e.raw)),t=(new l.Date).getTime()}}function a(s){let i=s;if(p.enabled){var r=p.params.mousewheel;p.params.cssMode&&i.preventDefault();let e=p.$el;if("container"!==p.params.mousewheel.eventsTarget&&(e=I(p.params.mousewheel.eventsTarget)),!p.mouseEntered&&!e[0].contains(i.target)&&!r.releaseOnEdges)return!0;i.originalEvent&&(i=i.originalEvent);let t=0;var n=p.rtlTranslate?-1:1,l=function(e){let t=0,a=0,s=0,i=0;return"detail"in e&&(a=e.detail),"wheelDelta"in e&&(a=-e.wheelDelta/120),"wheelDeltaY"in e&&(a=-e.wheelDeltaY/120),"wheelDeltaX"in e&&(t=-e.wheelDeltaX/120),"axis"in e&&e.axis===e.HORIZONTAL_AXIS&&(t=a,a=0),s=10*t,i=10*a,"deltaY"in e&&(i=e.deltaY),"deltaX"in e&&(s=e.deltaX),e.shiftKey&&!s&&(s=i,i=0),(s||i)&&e.deltaMode&&(1===e.deltaMode?(s*=40,i*=40):(s*=800,i*=800)),s&&!t&&(t=s<1?-1:1),i&&!a&&(a=i<1?-1:1),{spinX:t,spinY:a,pixelX:s,pixelY:i}}(i);if(r.forceToAxis)if(p.isHorizontal()){if(!(Math.abs(l.pixelX)>Math.abs(l.pixelY)))return!0;t=-l.pixelX*n}else{if(!(Math.abs(l.pixelY)>Math.abs(l.pixelX)))return!0;t=-l.pixelY}else t=Math.abs(l.pixelX)>Math.abs(l.pixelY)?-l.pixelX*n:-l.pixelY;if(0===t)return!0;r.invert&&(t=-t);let a=p.getTranslate()+t*r.sensitivity;if((a=a>=p.minTranslate()?p.minTranslate():a)<=p.maxTranslate()&&(a=p.maxTranslate()),(!!p.params.loop||!(a===p.minTranslate()||a===p.maxTranslate()))&&p.params.nested&&i.stopPropagation(),p.params.freeMode&&p.params.freeMode.enabled){const o={time:g(),delta:Math.abs(t),direction:Math.sign(t)};n=h&&o.time<h.time+500&&o.delta<=h.delta&&o.direction===h.direction;if(!n){h=void 0,p.params.loop&&p.loopFix();let e=p.getTranslate()+t*r.sensitivity;l=p.isBeginning,r=p.isEnd;if((e=e>=p.minTranslate()?p.minTranslate():e)<=p.maxTranslate()&&(e=p.maxTranslate()),p.setTransition(0),p.setTranslate(e),p.updateProgress(),p.updateActiveIndex(),p.updateSlidesClasses(),(!l&&p.isBeginning||!r&&p.isEnd)&&p.updateSlidesClasses(),p.params.freeMode.sticky){clearTimeout(u),u=void 0,15<=m.length&&m.shift();l=m.length?m[m.length-1]:void 0,r=m[0];if(m.push(o),l&&(o.delta>l.delta||o.direction!==l.direction))m.splice(0);else if(15<=m.length&&o.time-r.time<500&&1<=r.delta-o.delta&&o.delta<=6){const d=0<t?.8:.2;h=o,m.splice(0),u=C(()=>{p.slideToClosest(p.params.speed,!0,void 0,d)},0)}u=u||C(()=>{h=o,m.splice(0),p.slideToClosest(p.params.speed,!0,void 0,.5)},500)}if(n||c("scroll",i),p.params.autoplay&&p.params.autoplayDisableOnInteraction&&p.autoplay.stop(),e===p.minTranslate()||e===p.maxTranslate())return!0}}else{l={time:g(),delta:Math.abs(t),direction:Math.sign(t),raw:s},r=(2<=m.length&&m.shift(),m.length?m[m.length-1]:void 0);if(m.push(l),(!r||l.direction!==r.direction||l.delta>r.delta||l.time>r.time+150)&&f(l),function(e){var t=p.params.mousewheel;if(e.direction<0){if(p.isEnd&&!p.params.loop&&t.releaseOnEdges)return 1}else if(p.isBeginning&&!p.params.loop&&t.releaseOnEdges)return 1}(l))return!0}return i.preventDefault?i.preventDefault():i.returnValue=!1,!1}}function v(e){let t=p.$el;(t="container"!==p.params.mousewheel.eventsTarget?I(p.params.mousewheel.eventsTarget):t)[e]("mouseenter",o),t[e]("mouseleave",d),t[e]("wheel",a)}function s(){return p.params.cssMode?(p.wrapperEl.removeEventListener("wheel",a),!0):!p.mousewheel.enabled&&(v("on"),p.mousewheel.enabled=!0)}function i(){return p.params.cssMode?(p.wrapperEl.addEventListener(event,a),!0):!!p.mousewheel.enabled&&(v("off"),!(p.mousewheel.enabled=!1))}e("init",()=>{!p.params.mousewheel.enabled&&p.params.cssMode&&i(),p.params.mousewheel.enabled&&s()}),e("destroy",()=>{p.params.cssMode&&s(),p.mousewheel.enabled&&i()}),Object.assign(p.mousewheel,{enable:s,disable:i})},function(p){let{swiper:i,extendParams:c,on:e,emit:r}=p;function s(e){let t;return e&&(t=I(e),i.params.uniqueNavElements&&"string"==typeof e&&1<t.length&&1===i.$el.find(e).length&&(t=i.$el.find(e))),t}function a(e,t){var a=i.params.navigation;e&&0<e.length&&(e[t?"addClass":"removeClass"](a.disabledClass),e[0]&&"BUTTON"===e[0].tagName&&(e[0].disabled=t),i.params.watchOverflow&&i.enabled&&e[i.isLocked?"addClass":"removeClass"](a.lockClass))}function t(){var e,t;i.params.loop||({$nextEl:e,$prevEl:t}=i.navigation,a(t,i.isBeginning&&!i.params.rewind),a(e,i.isEnd&&!i.params.rewind))}function n(e){e.preventDefault(),i.isBeginning&&!i.params.loop&&!i.params.rewind||i.slidePrev()}function l(e){e.preventDefault(),i.isEnd&&!i.params.loop&&!i.params.rewind||i.slideNext()}function o(){var e=i.params.navigation;if(i.params.navigation=G(i,i.originalParams.navigation,i.params.navigation,{nextEl:"swiper-button-next",prevEl:"swiper-button-prev"}),e.nextEl||e.prevEl){const t=s(e.nextEl),a=s(e.prevEl);t&&0<t.length&&t.on("click",l),a&&0<a.length&&a.on("click",n),Object.assign(i.navigation,{$nextEl:t,nextEl:t&&t[0],$prevEl:a,prevEl:a&&a[0]}),i.enabled||(t&&t.addClass(e.lockClass),a&&a.addClass(e.lockClass))}}function d(){const{$nextEl:e,$prevEl:t}=i.navigation;e&&e.length&&(e.off("click",l),e.removeClass(i.params.navigation.disabledClass)),t&&t.length&&(t.off("click",n),t.removeClass(i.params.navigation.disabledClass))}c({navigation:{nextEl:null,prevEl:null,hideOnClick:!1,disabledClass:"swiper-button-disabled",hiddenClass:"swiper-button-hidden",lockClass:"swiper-button-lock"}}),i.navigation={nextEl:null,$nextEl:null,prevEl:null,$prevEl:null},e("init",()=>{o(),t()}),e("toEdge fromEdge lock unlock",()=>{t()}),e("destroy",()=>{d()}),e("enable disable",()=>{const{$nextEl:e,$prevEl:t}=i.navigation;e&&e[i.enabled?"removeClass":"addClass"](i.params.navigation.lockClass),t&&t[i.enabled?"removeClass":"addClass"](i.params.navigation.lockClass)}),e("click",(e,t)=>{const{$nextEl:a,$prevEl:s}=i.navigation;t=t.target;if(i.params.navigation.hideOnClick&&!I(t).is(s)&&!I(t).is(a)&&(!(i.pagination&&i.params.pagination&&i.params.pagination.clickable)||i.pagination.el!==t&&!i.pagination.el.contains(t))){let e;a?e=a.hasClass(i.params.navigation.hiddenClass):s&&(e=s.hasClass(i.params.navigation.hiddenClass)),!0===e?r("navigationShow"):r("navigationHide"),a&&a.toggleClass(i.params.navigation.hiddenClass),s&&s.toggleClass(i.params.navigation.hiddenClass)}}),Object.assign(i.navigation,{update:t,init:o,destroy:d})},function(e){let{swiper:u,extendParams:r,on:t,emit:h}=e;e="swiper-pagination",r({pagination:{el:null,bulletElement:"span",clickable:!1,hideOnClick:!1,renderBullet:null,renderProgressbar:null,renderFraction:null,renderCustom:null,progressbarOpposite:!1,type:"bullets",dynamicBullets:!1,dynamicMainBullets:1,formatFractionCurrent:e=>e,formatFractionTotal:e=>e,bulletClass:e+"-bullet",bulletActiveClass:e+"-bullet-active",modifierClass:e+"-",currentClass:e+"-current",totalClass:e+"-total",hiddenClass:e+"-hidden",progressbarFillClass:e+"-progressbar-fill",progressbarOppositeClass:e+"-progressbar-opposite",clickableClass:e+"-clickable",lockClass:e+"-lock",horizontalClass:e+"-horizontal",verticalClass:e+"-vertical"}}),u.pagination={el:null,$el:null,bullets:[]};let m,f=0;function a(){return!u.params.pagination.el||!u.pagination.el||!u.pagination.$el||0===u.pagination.$el.length}function v(e,t){var a=u.params.pagination["bulletActiveClass"];e[t]().addClass(a+"-"+t)[t]().addClass(a+`-${t}-`+t)}function s(){var t=u.rtl;const r=u.params.pagination;if(!a()){var n=(u.virtual&&u.params.virtual.enabled?u.virtual:u).slides.length;const d=u.pagination.$el;let i;var s=u.params.loop?Math.ceil((n-2*u.loopedSlides)/u.params.slidesPerGroup):u.snapGrid.length;if(u.params.loop?((i=Math.ceil((u.activeIndex-u.loopedSlides)/u.params.slidesPerGroup))>n-1-2*u.loopedSlides&&(i-=n-2*u.loopedSlides),i>s-1&&(i-=s),i<0&&"bullets"!==u.params.paginationType&&(i=s+i)):i=void 0!==u.snapIndex?u.snapIndex:u.activeIndex||0,"bullets"===r.type&&u.pagination.bullets&&0<u.pagination.bullets.length){const p=u.pagination.bullets;let a,s,e;if(r.dynamicBullets&&(m=p.eq(0)[u.isHorizontal()?"outerWidth":"outerHeight"](!0),d.css(u.isHorizontal()?"width":"height",m*(r.dynamicMainBullets+4)+"px"),1<r.dynamicMainBullets&&void 0!==u.previousIndex&&((f+=i-(u.previousIndex-u.loopedSlides||0))>r.dynamicMainBullets-1?f=r.dynamicMainBullets-1:f<0&&(f=0)),a=Math.max(i-f,0),s=a+(Math.min(p.length,r.dynamicMainBullets)-1),e=(s+a)/2),p.removeClass(["","-next","-next-next","-prev","-prev-prev","-main"].map(e=>""+r.bulletActiveClass+e).join(" ")),1<d.length)p.each(e=>{const t=I(e);e=t.index();e===i&&t.addClass(r.bulletActiveClass),r.dynamicBullets&&(e>=a&&e<=s&&t.addClass(r.bulletActiveClass+"-main"),e===a&&v(t,"prev"),e===s&&v(t,"next"))});else{const c=p.eq(i);var n=c.index();if(c.addClass(r.bulletActiveClass),r.dynamicBullets){var l=p.eq(a),o=p.eq(s);for(let e=a;e<=s;e+=1)p.eq(e).addClass(r.bulletActiveClass+"-main");if(u.params.loop)if(n>=p.length){for(let e=r.dynamicMainBullets;0<=e;--e)p.eq(p.length-e).addClass(r.bulletActiveClass+"-main");p.eq(p.length-r.dynamicMainBullets-1).addClass(r.bulletActiveClass+"-prev")}else v(l,"prev"),v(o,"next");else v(l,"prev"),v(o,"next")}}r.dynamicBullets&&(n=Math.min(p.length,r.dynamicMainBullets+4),l=(m*n-m)/2-e*m,o=t?"right":"left",p.css(u.isHorizontal()?o:"top",l+"px"))}if("fraction"===r.type&&(d.find(b(r.currentClass)).text(r.formatFractionCurrent(i+1)),d.find(b(r.totalClass)).text(r.formatFractionTotal(s))),"progressbar"===r.type){let e;e=r.progressbarOpposite?u.isHorizontal()?"vertical":"horizontal":u.isHorizontal()?"horizontal":"vertical";n=(i+1)/s;let t=1,a=1;"horizontal"===e?t=n:a=n,d.find(b(r.progressbarFillClass)).transform(`translate3d(0,0,0) scaleX(${t}) scaleY(${a})`).transition(u.params.speed)}"custom"===r.type&&r.renderCustom?(d.html(r.renderCustom(u,i+1,s)),h("paginationRender",d[0])):h("paginationUpdate",d[0]),u.params.watchOverflow&&u.enabled&&d[u.isLocked?"addClass":"removeClass"](r.lockClass)}}function i(){const s=u.params.pagination;if(!a()){var e=(u.virtual&&u.params.virtual.enabled?u.virtual:u).slides.length;const i=u.pagination.$el;let a="";if("bullets"===s.type){let t=u.params.loop?Math.ceil((e-2*u.loopedSlides)/u.params.slidesPerGroup):u.snapGrid.length;u.params.freeMode&&u.params.freeMode.enabled&&!u.params.loop&&t>e&&(t=e);for(let e=0;e<t;e+=1)s.renderBullet?a+=s.renderBullet.call(u,e,s.bulletClass):a+=`<${s.bulletElement} class="${s.bulletClass}"></${s.bulletElement}>`;i.html(a),u.pagination.bullets=i.find(b(s.bulletClass))}"fraction"===s.type&&(a=s.renderFraction?s.renderFraction.call(u,s.currentClass,s.totalClass):`<span class="${s.currentClass}"></span>`+" / "+`<span class="${s.totalClass}"></span>`,i.html(a)),"progressbar"===s.type&&(a=s.renderProgressbar?s.renderProgressbar.call(u,s.progressbarFillClass):`<span class="${s.progressbarFillClass}"></span>`,i.html(a)),"custom"!==s.type&&h("paginationRender",u.pagination.$el[0])}}function n(){u.params.pagination=G(u,u.originalParams.pagination,u.params.pagination,{el:"swiper-pagination"});const t=u.params.pagination;if(t.el){let e=I(t.el);0!==e.length&&(u.params.uniqueNavElements&&"string"==typeof t.el&&1<e.length&&1<(e=u.$el.find(t.el)).length&&(e=e.filter(e=>I(e).parents(".swiper")[0]===u.el)),"bullets"===t.type&&t.clickable&&e.addClass(t.clickableClass),e.addClass(t.modifierClass+t.type),e.addClass(u.isHorizontal()?t.horizontalClass:t.verticalClass),"bullets"===t.type&&t.dynamicBullets&&(e.addClass(""+t.modifierClass+t.type+"-dynamic"),f=0,t.dynamicMainBullets<1&&(t.dynamicMainBullets=1)),"progressbar"===t.type&&t.progressbarOpposite&&e.addClass(t.progressbarOppositeClass),t.clickable&&e.on("click",b(t.bulletClass),function(e){e.preventDefault();let t=I(this).index()*u.params.slidesPerGroup;u.params.loop&&(t+=u.loopedSlides),u.slideTo(t)}),Object.assign(u.pagination,{$el:e,el:e[0]}),u.enabled||e.addClass(t.lockClass))}}function l(){var e=u.params.pagination;if(!a()){const t=u.pagination.$el;t.removeClass(e.hiddenClass),t.removeClass(e.modifierClass+e.type),t.removeClass(u.isHorizontal()?e.horizontalClass:e.verticalClass),u.pagination.bullets&&u.pagination.bullets.removeClass&&u.pagination.bullets.removeClass(e.bulletActiveClass),e.clickable&&t.off("click",b(e.bulletClass))}}t("init",()=>{n(),i(),s()}),t("activeIndexChange",()=>{(u.params.loop||void 0===u.snapIndex)&&s()}),t("snapIndexChange",()=>{u.params.loop||s()}),t("slidesLengthChange",()=>{u.params.loop&&(i(),s())}),t("snapGridLengthChange",()=>{u.params.loop||(i(),s())}),t("destroy",()=>{l()}),t("enable disable",()=>{const e=u.pagination["$el"];e&&e[u.enabled?"removeClass":"addClass"](u.params.pagination.lockClass)}),t("lock unlock",()=>{s()}),t("click",(e,t)=>{t=t.target;const a=u.pagination["$el"];u.params.pagination.el&&u.params.pagination.hideOnClick&&0<a.length&&!I(t).hasClass(u.params.pagination.bulletClass)&&(u.navigation&&(u.navigation.nextEl&&t===u.navigation.nextEl||u.navigation.prevEl&&t===u.navigation.prevEl)||(!0===a.hasClass(u.params.pagination.hiddenClass)?h("paginationShow"):h("paginationHide"),a.toggleClass(u.params.pagination.hiddenClass)))}),Object.assign(u.pagination,{render:i,update:s,init:n,destroy:l})},function(a){let{swiper:l,extendParams:i,on:e,emit:n}=a;const h=T();let o=!1,m=null,d=null,p,c,u,s;function t(){if(l.params.scrollbar.el&&l.scrollbar.el){var{scrollbar:a,rtlTranslate:s,progress:i}=l;const{$dragEl:r,$el:n}=a;a=l.params.scrollbar;let e=c,t=(u-c)*i;s?0<(t=-t)?(e=c-t,t=0):-t+c>u&&(e=u+t):t<0?(e=c+t,t=0):t+c>u&&(e=u-t),l.isHorizontal()?(r.transform(`translate3d(${t}px, 0, 0)`),r[0].style.width=e+"px"):(r.transform(`translate3d(0px, ${t}px, 0)`),r[0].style.height=e+"px"),a.hide&&(clearTimeout(m),n[0].style.opacity=1,m=setTimeout(()=>{n[0].style.opacity=0,n.transition(400)},1e3))}}function r(){if(l.params.scrollbar.el&&l.scrollbar.el){const e=l["scrollbar"],{$dragEl:t,$el:a}=e;t[0].style.width="",t[0].style.height="",u=l.isHorizontal()?a[0].offsetWidth:a[0].offsetHeight,s=l.size/(l.virtualSize+l.params.slidesOffsetBefore-(l.params.centeredSlides?l.snapGrid[0]:0)),c="auto"===l.params.scrollbar.dragSize?u*s:parseInt(l.params.scrollbar.dragSize,10),l.isHorizontal()?t[0].style.width=c+"px":t[0].style.height=c+"px",1<=s?a[0].style.display="none":a[0].style.display="",l.params.scrollbar.hide&&(a[0].style.opacity=0),l.params.watchOverflow&&l.enabled&&e.$el[l.isLocked?"addClass":"removeClass"](l.params.scrollbar.lockClass)}}function f(e){return l.isHorizontal()?("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientX:("touchstart"===e.type||"touchmove"===e.type?e.targetTouches[0]:e).clientY}function v(e){var{scrollbar:t,rtlTranslate:a}=l;const s=t["$el"];let i;i=(f(e)-s.offset()[l.isHorizontal()?"left":"top"]-(null!==p?p:c/2))/(u-c),i=Math.max(Math.min(i,1),0),a&&(i=1-i);t=l.minTranslate()+(l.maxTranslate()-l.minTranslate())*i;l.updateProgress(t),l.setTranslate(t),l.updateActiveIndex(),l.updateSlidesClasses()}function g(e){var t=l.params.scrollbar;const{scrollbar:a,$wrapperEl:s}=l,{$el:i,$dragEl:r}=a;o=!0,p=e.target===r[0]||e.target===r?f(e)-e.target.getBoundingClientRect()[l.isHorizontal()?"left":"top"]:null,e.preventDefault(),e.stopPropagation(),s.transition(100),r.transition(100),v(e),clearTimeout(d),i.transition(0),t.hide&&i.css("opacity",1),l.params.cssMode&&l.$wrapperEl.css("scroll-snap-type","none"),n("scrollbarDragStart",e)}function w(e){const{scrollbar:t,$wrapperEl:a}=l,{$el:s,$dragEl:i}=t;o&&(e.preventDefault?e.preventDefault():e.returnValue=!1,v(e),a.transition(0),s.transition(0),i.transition(0),n("scrollbarDragMove",e))}function b(e){var t=l.params.scrollbar;const{scrollbar:a,$wrapperEl:s}=l,i=a["$el"];o&&(o=!1,l.params.cssMode&&(l.$wrapperEl.css("scroll-snap-type",""),s.transition("")),t.hide&&(clearTimeout(d),d=C(()=>{i.css("opacity",0),i.transition(400)},1e3)),n("scrollbarDragEnd",e),t.snapOnRelease&&l.slideToClosest())}function x(e){var{scrollbar:t,touchEventsTouch:a,touchEventsDesktop:s,params:i,support:r}=l;const n=t.$el[0];t=!(!r.passiveListener||!i.passiveListeners)&&{passive:!1,capture:!1},i=!(!r.passiveListener||!i.passiveListeners)&&{passive:!0,capture:!1};n&&(e="on"===e?"addEventListener":"removeEventListener",r.touch?(n[e](a.start,g,t),n[e](a.move,w,t),n[e](a.end,b,i)):(n[e](s.start,g,t),h[e](s.move,w,t),h[e](s.end,b,i)))}function y(){const{scrollbar:a,$el:s}=l;l.params.scrollbar=G(l,l.originalParams.scrollbar,l.params.scrollbar,{el:"swiper-scrollbar"});var i=l.params.scrollbar;if(i.el){let e=I(i.el),t=(e=l.params.uniqueNavElements&&"string"==typeof i.el&&1<e.length&&1===s.find(i.el).length?s.find(i.el):e).find("."+l.params.scrollbar.dragClass);0===t.length&&(t=I(`<div class="${l.params.scrollbar.dragClass}"></div>`),e.append(t)),Object.assign(a,{$el:e,el:e[0],$dragEl:t,dragEl:t[0]}),i.draggable&&l.params.scrollbar.el&&x("on"),e&&e[l.enabled?"removeClass":"addClass"](l.params.scrollbar.lockClass)}}function E(){l.params.scrollbar.el&&x("off")}i({scrollbar:{el:null,dragSize:"auto",hide:!1,draggable:!1,snapOnRelease:!0,lockClass:"swiper-scrollbar-lock",dragClass:"swiper-scrollbar-drag"}}),l.scrollbar={el:null,dragEl:null,$el:null,$dragEl:null},e("init",()=>{y(),r(),t()}),e("update resize observerUpdate lock unlock",()=>{r()}),e("setTranslate",()=>{t()}),e("setTransition",(e,t)=>{t=t,l.params.scrollbar.el&&l.scrollbar.el&&l.scrollbar.$dragEl.transition(t)}),e("enable disable",()=>{const e=l.scrollbar["$el"];e&&e[l.enabled?"removeClass":"addClass"](l.params.scrollbar.lockClass)}),e("destroy",()=>{E()}),Object.assign(l.scrollbar,{updateSize:r,setTranslate:t,init:y,destroy:E})},function(e){let{swiper:o,extendParams:t,on:a}=e;t({parallax:{enabled:!1}});const r=(e,t)=>{var a=o["rtl"];const s=I(e);e=a?-1:1,a=s.attr("data-swiper-parallax")||"0";let i=s.attr("data-swiper-parallax-x"),r=s.attr("data-swiper-parallax-y");var n=s.attr("data-swiper-parallax-scale"),l=s.attr("data-swiper-parallax-opacity");i||r?(i=i||"0",r=r||"0"):o.isHorizontal()?(i=a,r="0"):(r=a,i="0"),i=0<=i.indexOf("%")?parseInt(i,10)*t*e+"%":i*t*e+"px",r=0<=r.indexOf("%")?parseInt(r,10)*t+"%":r*t+"px",null!=l&&(a=l-(l-1)*(1-Math.abs(t)),s[0].style.opacity=a),null==n?s.transform(`translate3d(${i}, ${r}, 0px)`):(e=n-(n-1)*(1-Math.abs(t)),s.transform(`translate3d(${i}, ${r}, 0px) scale(${e})`))},s=()=>{const{$el:e,slides:t,progress:s,snapGrid:i}=o;e.children("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{r(e,s)}),t.each((e,t)=>{let a=e.progress;1<o.params.slidesPerGroup&&"auto"!==o.params.slidesPerView&&(a+=Math.ceil(t/2)-s*(i.length-1)),a=Math.min(Math.max(a,-1),1),I(e).find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{r(e,a)})})};a("beforeInit",()=>{o.params.parallax.enabled&&(o.params.watchSlidesProgress=!0,o.originalParams.watchSlidesProgress=!0)}),a("init",()=>{o.params.parallax.enabled&&s()}),a("setTranslate",()=>{o.params.parallax.enabled&&s()}),a("setTransition",(e,t)=>{if(o.params.parallax.enabled){var s=t;void 0===s&&(s=o.params.speed);const a=o["$el"];a.find("[data-swiper-parallax], [data-swiper-parallax-x], [data-swiper-parallax-y], [data-swiper-parallax-opacity], [data-swiper-parallax-scale]").each(e=>{const t=I(e);let a=parseInt(t.attr("data-swiper-parallax-duration"),10)||s;0===s&&(a=0),t.transition(a)})}else;})},function(a){let{swiper:c,extendParams:s,on:e,emit:i}=a;const f=O();s({zoom:{enabled:!1,maxRatio:3,minRatio:1,toggle:!0,containerClass:"swiper-zoom-container",zoomedSlideClass:"swiper-slide-zoomed"}}),c.zoom={enabled:!1};let u=1,d=!1,t,r,n;const h={$slideEl:void 0,slideWidth:void 0,slideHeight:void 0,$imageEl:void 0,$imageWrapEl:void 0,maxRatio:3},m={isTouched:void 0,isMoved:void 0,currentX:void 0,currentY:void 0,minX:void 0,minY:void 0,maxX:void 0,maxY:void 0,width:void 0,height:void 0,startX:void 0,startY:void 0,touchesStart:{},touchesCurrent:{}},l={x:void 0,y:void 0,prevPositionX:void 0,prevPositionY:void 0,prevTime:void 0};let p=1;function v(e){if(e.targetTouches.length<2)return 1;var t=e.targetTouches[0].pageX,a=e.targetTouches[0].pageY,s=e.targetTouches[1].pageX,e=e.targetTouches[1].pageY;return Math.sqrt((s-t)**2+(e-a)**2)}function g(e){var t=c.support,a=c.params.zoom;if(r=!1,n=!1,!t.gestures){if("touchstart"!==e.type||"touchstart"===e.type&&e.targetTouches.length<2)return;r=!0,h.scaleStart=v(e)}h.$slideEl&&h.$slideEl.length||(h.$slideEl=I(e.target).closest("."+c.params.slideClass),0===h.$slideEl.length&&(h.$slideEl=c.slides.eq(c.activeIndex)),h.$imageEl=h.$slideEl.find("."+a.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),h.$imageWrapEl=h.$imageEl.parent("."+a.containerClass),h.maxRatio=h.$imageWrapEl.attr("data-swiper-zoom")||a.maxRatio,0!==h.$imageWrapEl.length)?(h.$imageEl&&h.$imageEl.transition(0),d=!0):h.$imageEl=void 0}function w(e){var t=c.support,a=c.params.zoom;const s=c.zoom;if(!t.gestures){if("touchmove"!==e.type||"touchmove"===e.type&&e.targetTouches.length<2)return;n=!0,h.scaleMove=v(e)}h.$imageEl&&0!==h.$imageEl.length?(t.gestures?s.scale=e.scale*u:s.scale=h.scaleMove/h.scaleStart*u,s.scale>h.maxRatio&&(s.scale=h.maxRatio-1+(s.scale-h.maxRatio+1)**.5),s.scale<a.minRatio&&(s.scale=a.minRatio+1-(a.minRatio-s.scale+1)**.5),h.$imageEl.transform(`translate3d(0,0,0) scale(${s.scale})`)):"gesturechange"===e.type&&g(e)}function o(e){var t=c.device,a=c.support,s=c.params.zoom;const i=c.zoom;if(!a.gestures){if(!r||!n)return;if("touchend"!==e.type||"touchend"===e.type&&e.changedTouches.length<2&&!t.android)return;r=!1,n=!1}h.$imageEl&&0!==h.$imageEl.length&&(i.scale=Math.max(Math.min(i.scale,h.maxRatio),s.minRatio),h.$imageEl.transition(c.params.speed).transform(`translate3d(0,0,0) scale(${i.scale})`),u=i.scale,d=!1,1===i.scale&&(h.$slideEl=void 0))}function b(e){var t=c.zoom;if(h.$imageEl&&0!==h.$imageEl.length&&(c.allowClick=!1,m.isTouched&&h.$slideEl)){m.isMoved||(m.width=h.$imageEl[0].offsetWidth,m.height=h.$imageEl[0].offsetHeight,m.startX=L(h.$imageWrapEl[0],"x")||0,m.startY=L(h.$imageWrapEl[0],"y")||0,h.slideWidth=h.$slideEl[0].offsetWidth,h.slideHeight=h.$slideEl[0].offsetHeight,h.$imageWrapEl.transition(0));var a=m.width*t.scale,t=m.height*t.scale;if(!(a<h.slideWidth&&t<h.slideHeight)){if(m.minX=Math.min(h.slideWidth/2-a/2,0),m.maxX=-m.minX,m.minY=Math.min(h.slideHeight/2-t/2,0),m.maxY=-m.minY,m.touchesCurrent.x=("touchmove"===e.type?e.targetTouches[0]:e).pageX,m.touchesCurrent.y=("touchmove"===e.type?e.targetTouches[0]:e).pageY,!m.isMoved&&!d){if(c.isHorizontal()&&(Math.floor(m.minX)===Math.floor(m.startX)&&m.touchesCurrent.x<m.touchesStart.x||Math.floor(m.maxX)===Math.floor(m.startX)&&m.touchesCurrent.x>m.touchesStart.x))return void(m.isTouched=!1);if(!c.isHorizontal()&&(Math.floor(m.minY)===Math.floor(m.startY)&&m.touchesCurrent.y<m.touchesStart.y||Math.floor(m.maxY)===Math.floor(m.startY)&&m.touchesCurrent.y>m.touchesStart.y))return void(m.isTouched=!1)}e.cancelable&&e.preventDefault(),e.stopPropagation(),m.isMoved=!0,m.currentX=m.touchesCurrent.x-m.touchesStart.x+m.startX,m.currentY=m.touchesCurrent.y-m.touchesStart.y+m.startY,m.currentX<m.minX&&(m.currentX=m.minX+1-(m.minX-m.currentX+1)**.8),m.currentX>m.maxX&&(m.currentX=m.maxX-1+(m.currentX-m.maxX+1)**.8),m.currentY<m.minY&&(m.currentY=m.minY+1-(m.minY-m.currentY+1)**.8),m.currentY>m.maxY&&(m.currentY=m.maxY-1+(m.currentY-m.maxY+1)**.8),l.prevPositionX||(l.prevPositionX=m.touchesCurrent.x),l.prevPositionY||(l.prevPositionY=m.touchesCurrent.y),l.prevTime||(l.prevTime=Date.now()),l.x=(m.touchesCurrent.x-l.prevPositionX)/(Date.now()-l.prevTime)/2,l.y=(m.touchesCurrent.y-l.prevPositionY)/(Date.now()-l.prevTime)/2,Math.abs(m.touchesCurrent.x-l.prevPositionX)<2&&(l.x=0),Math.abs(m.touchesCurrent.y-l.prevPositionY)<2&&(l.y=0),l.prevPositionX=m.touchesCurrent.x,l.prevPositionY=m.touchesCurrent.y,l.prevTime=Date.now(),h.$imageWrapEl.transform(`translate3d(${m.currentX}px, ${m.currentY}px,0)`)}}}function x(){const e=c.zoom;h.$slideEl&&c.previousIndex!==c.activeIndex&&(h.$imageEl&&h.$imageEl.transform("translate3d(0,0,0) scale(1)"),h.$imageWrapEl&&h.$imageWrapEl.transform("translate3d(0,0,0)"),e.scale=1,u=1,h.$slideEl=void 0,h.$imageEl=void 0,h.$imageWrapEl=void 0)}function y(i){const r=c.zoom;var n,l,o,d,p=c.params.zoom;if(h.$slideEl||(i&&i.target&&(h.$slideEl=I(i.target).closest("."+c.params.slideClass)),h.$slideEl||(c.params.virtual&&c.params.virtual.enabled&&c.virtual?h.$slideEl=c.$wrapperEl.children("."+c.params.slideActiveClass):h.$slideEl=c.slides.eq(c.activeIndex)),h.$imageEl=h.$slideEl.find("."+p.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),h.$imageWrapEl=h.$imageEl.parent("."+p.containerClass)),h.$imageEl&&0!==h.$imageEl.length&&h.$imageWrapEl&&0!==h.$imageWrapEl.length){c.params.cssMode&&(c.wrapperEl.style.overflow="hidden",c.wrapperEl.style.touchAction="none"),h.$slideEl.addClass(""+p.zoomedSlideClass);let e,t;let a,s;t=void 0===m.touchesStart.x&&i?(e=("touchend"===i.type?i.changedTouches[0]:i).pageX,("touchend"===i.type?i.changedTouches[0]:i).pageY):(e=m.touchesStart.x,m.touchesStart.y),r.scale=h.$imageWrapEl.attr("data-swiper-zoom")||p.maxRatio,u=h.$imageWrapEl.attr("data-swiper-zoom")||p.maxRatio,i?(p=h.$slideEl[0].offsetWidth,i=h.$slideEl[0].offsetHeight,n=h.$slideEl.offset().left+f.scrollX,l=h.$slideEl.offset().top+f.scrollY,n=n+p/2-e,l=l+i/2-t,o=h.$imageEl[0].offsetWidth,d=h.$imageEl[0].offsetHeight,o=o*r.scale,d=d*r.scale,o=-(p=Math.min(p/2-o/2,0)),d=-(i=Math.min(i/2-d/2,0)),a=n*r.scale,s=l*r.scale,(a=a<p?p:a)>o&&(a=o),(s=s<i?i:s)>d&&(s=d)):(a=0,s=0),h.$imageWrapEl.transition(300).transform(`translate3d(${a}px, ${s}px,0)`),h.$imageEl.transition(300).transform(`translate3d(0,0,0) scale(${r.scale})`)}}function E(){const e=c.zoom;var t=c.params.zoom;h.$slideEl||(c.params.virtual&&c.params.virtual.enabled&&c.virtual?h.$slideEl=c.$wrapperEl.children("."+c.params.slideActiveClass):h.$slideEl=c.slides.eq(c.activeIndex),h.$imageEl=h.$slideEl.find("."+t.containerClass).eq(0).find("picture, img, svg, canvas, .swiper-zoom-target").eq(0),h.$imageWrapEl=h.$imageEl.parent("."+t.containerClass)),h.$imageEl&&0!==h.$imageEl.length&&h.$imageWrapEl&&0!==h.$imageWrapEl.length&&(c.params.cssMode&&(c.wrapperEl.style.overflow="",c.wrapperEl.style.touchAction=""),e.scale=1,u=1,h.$imageWrapEl.transition(300).transform("translate3d(0,0,0)"),h.$imageEl.transition(300).transform("translate3d(0,0,0) scale(1)"),h.$slideEl.removeClass(""+t.zoomedSlideClass),h.$slideEl=void 0)}function T(e){var t=c.zoom;t.scale&&1!==t.scale?E():y(e)}function C(){var e=c.support;return{passiveListener:!("touchstart"!==c.touchEvents.start||!e.passiveListener||!c.params.passiveListeners)&&{passive:!0,capture:!1},activeListenerWithCapture:!e.passiveListener||{passive:!1,capture:!0}}}function S(){return"."+c.params.slideClass}function M(e){var t=C()["passiveListener"],a=S();c.$wrapperEl[e]("gesturestart",a,g,t),c.$wrapperEl[e]("gesturechange",a,w,t),c.$wrapperEl[e]("gestureend",a,o,t)}function $(){t||(t=!0,M("on"))}function P(){t&&(t=!1,M("off"))}function k(){const e=c.zoom;var t,a,s,i;e.enabled||(e.enabled=!0,t=c.support,{passiveListener:a,activeListenerWithCapture:s}=C(),i=S(),t.gestures?(c.$wrapperEl.on(c.touchEvents.start,$,a),c.$wrapperEl.on(c.touchEvents.end,P,a)):"touchstart"===c.touchEvents.start&&(c.$wrapperEl.on(c.touchEvents.start,i,g,a),c.$wrapperEl.on(c.touchEvents.move,i,w,s),c.$wrapperEl.on(c.touchEvents.end,i,o,a),c.touchEvents.cancel&&c.$wrapperEl.on(c.touchEvents.cancel,i,o,a)),c.$wrapperEl.on(c.touchEvents.move,"."+c.params.zoom.containerClass,b,s))}function z(){const e=c.zoom;var t,a,s,i;e.enabled&&(t=c.support,{passiveListener:a,activeListenerWithCapture:s}=(e.enabled=!1,C()),i=S(),t.gestures?(c.$wrapperEl.off(c.touchEvents.start,$,a),c.$wrapperEl.off(c.touchEvents.end,P,a)):"touchstart"===c.touchEvents.start&&(c.$wrapperEl.off(c.touchEvents.start,i,g,a),c.$wrapperEl.off(c.touchEvents.move,i,w,s),c.$wrapperEl.off(c.touchEvents.end,i,o,a),c.touchEvents.cancel&&c.$wrapperEl.off(c.touchEvents.cancel,i,o,a)),c.$wrapperEl.off(c.touchEvents.move,"."+c.params.zoom.containerClass,b,s))}Object.defineProperty(c.zoom,"scale",{get(){return p},set(e){var t,a;p!==e&&(t=h.$imageEl?h.$imageEl[0]:void 0,a=h.$slideEl?h.$slideEl[0]:void 0,i("zoomChange",e,t,a)),p=e}}),e("init",()=>{c.params.zoom.enabled&&k()}),e("destroy",()=>{z()}),e("touchStart",(e,t)=>{var a;c.zoom.enabled&&(t=t,a=c.device,h.$imageEl&&0!==h.$imageEl.length&&(m.isTouched||(a.android&&t.cancelable&&t.preventDefault(),m.isTouched=!0,m.touchesStart.x=("touchstart"===t.type?t.targetTouches[0]:t).pageX,m.touchesStart.y=("touchstart"===t.type?t.targetTouches[0]:t).pageY)))}),e("touchEnd",(e,t)=>{if(c.zoom.enabled){var a=c.zoom;if(h.$imageEl&&0!==h.$imageEl.length){if(!m.isTouched||!m.isMoved)return void(m.isTouched=!1,m.isMoved=!1);m.isTouched=!1,m.isMoved=!1;let e=300,t=300;var s=l.x*e,s=m.currentX+s,i=l.y*t,i=m.currentY+i,r=(0!==l.x&&(e=Math.abs((s-m.currentX)/l.x)),0!==l.y&&(t=Math.abs((i-m.currentY)/l.y)),Math.max(e,t)),s=(m.currentX=s,m.currentY=i,m.width*a.scale),i=m.height*a.scale;m.minX=Math.min(h.slideWidth/2-s/2,0),m.maxX=-m.minX,m.minY=Math.min(h.slideHeight/2-i/2,0),m.maxY=-m.minY,m.currentX=Math.max(Math.min(m.currentX,m.maxX),m.minX),m.currentY=Math.max(Math.min(m.currentY,m.maxY),m.minY),h.$imageWrapEl.transition(r).transform(`translate3d(${m.currentX}px, ${m.currentY}px,0)`)}}}),e("doubleTap",(e,t)=>{!c.animating&&c.params.zoom.enabled&&c.zoom.enabled&&c.params.zoom.toggle&&T(t)}),e("transitionEnd",()=>{c.zoom.enabled&&c.params.zoom.enabled&&x()}),e("slideChange",()=>{c.zoom.enabled&&c.params.zoom.enabled&&c.params.cssMode&&x()}),Object.assign(c.zoom,{enable:k,disable:z,in:y,out:E,toggle:T})},function(e){let{swiper:u,extendParams:t,on:a,emit:h}=e,d=(t({lazy:{checkInView:!1,enabled:!1,loadPrevNext:!1,loadPrevNextAmount:1,loadOnTransitionStart:!1,scrollingElement:"",elementClass:"swiper-lazy",loadingClass:"swiper-lazy-loading",loadedClass:"swiper-lazy-loaded",preloaderClass:"swiper-lazy-preloader"}}),!(u.lazy={})),c=!1;function m(e,d){void 0===d&&(d=!0);const p=u.params.lazy;if(void 0!==e&&0!==u.slides.length){const c=u.virtual&&u.params.virtual.enabled?u.$wrapperEl.children(`.${u.params.slideClass}[data-swiper-slide-index="${e}"]`):u.slides.eq(e),t=c.find(`.${p.elementClass}:not(.${p.loadedClass}):not(.${p.loadingClass})`);!c.hasClass(p.elementClass)||c.hasClass(p.loadedClass)||c.hasClass(p.loadingClass)||t.push(c[0]),0!==t.length&&t.each(e=>{const s=I(e),i=(s.addClass(p.loadingClass),s.attr("data-background")),r=s.attr("data-src"),n=s.attr("data-srcset"),l=s.attr("data-sizes"),o=s.parent("picture");u.loadImage(s[0],r||i,n,l,!1,()=>{if(void 0!==u&&null!==u&&u&&(!u||u.params)&&!u.destroyed){if(i?(s.css("background-image",`url("${i}")`),s.removeAttr("data-background")):(n&&(s.attr("srcset",n),s.removeAttr("data-srcset")),l&&(s.attr("sizes",l),s.removeAttr("data-sizes")),o.length&&o.children("source").each(e=>{const t=I(e);t.attr("data-srcset")&&(t.attr("srcset",t.attr("data-srcset")),t.removeAttr("data-srcset"))}),r&&(s.attr("src",r),s.removeAttr("data-src"))),s.addClass(p.loadedClass).removeClass(p.loadingClass),c.find("."+p.preloaderClass).remove(),u.params.loop&&d){var e=c.attr("data-swiper-slide-index");if(c.hasClass(u.params.slideDuplicateClass)){const t=u.$wrapperEl.children(`[data-swiper-slide-index="${e}"]:not(.${u.params.slideDuplicateClass})`);m(t.index(),!1)}else{const a=u.$wrapperEl.children(`.${u.params.slideDuplicateClass}[data-swiper-slide-index="${e}"]`);m(a.index(),!1)}}h("lazyImageReady",c[0],s[0]),u.params.autoHeight&&u.updateAutoHeight()}}),h("lazyImageLoad",c[0],s[0])})}}function p(){const{$wrapperEl:t,params:a,slides:s,activeIndex:i}=u,r=u.virtual&&a.virtual.enabled;var e=a.lazy;let n=a.slidesPerView;function l(e){if(r){if(t.children(`.${a.slideClass}[data-swiper-slide-index="${e}"]`).length)return 1}else if(s[e])return 1}function o(e){return r?I(e).attr("data-swiper-slide-index"):I(e).index()}if("auto"===n&&(n=0),c=c||!0,u.params.watchSlidesProgress)t.children("."+a.slideVisibleClass).each(e=>{m(r?I(e).attr("data-swiper-slide-index"):I(e).index())});else if(1<n)for(let e=i;e<i+n;e+=1)l(e)&&m(e);else m(i);if(e.loadPrevNext)if(1<n||e.loadPrevNextAmount&&1<e.loadPrevNextAmount){var e=e.loadPrevNextAmount,d=n,p=Math.min(i+d+Math.max(e,d),s.length),d=Math.max(i-Math.max(d,e),0);for(let e=i+n;e<p;e+=1)l(e)&&m(e);for(let e=d;e<i;e+=1)l(e)&&m(e)}else{e=t.children("."+a.slideNextClass),d=(0<e.length&&m(o(e)),t.children("."+a.slidePrevClass));0<d.length&&m(o(d))}}function f(){var e=O();if(u&&!u.destroyed){const l=u.params.lazy.scrollingElement?I(u.params.lazy.scrollingElement):I(e);var a=l[0]===e,s=a?e.innerWidth:l[0].offsetWidth,i=a?e.innerHeight:l[0].offsetHeight;const o=u.$el.offset();a=u["rtlTranslate"];let t=!1;a&&(o.left-=u.$el[0].scrollLeft);var r=[[o.left,o.top],[o.left+u.width,o.top],[o.left,o.top+u.height],[o.left+u.width,o.top+u.height]];for(let e=0;e<r.length;e+=1){var n=r[e];0<=n[0]&&n[0]<=s&&0<=n[1]&&n[1]<=i&&(0===n[0]&&0===n[1]||(t=!0))}e=!("touchstart"!==u.touchEvents.start||!u.support.passiveListener||!u.params.passiveListeners)&&{passive:!0,capture:!1};t?(p(),l.off("scroll",f,e)):d||(d=!0,l.on("scroll",f,e))}}a("beforeInit",()=>{u.params.lazy.enabled&&u.params.preloadImages&&(u.params.preloadImages=!1)}),a("init",()=>{u.params.lazy.enabled&&(u.params.lazy.checkInView?f:p)()}),a("scroll",()=>{u.params.freeMode&&u.params.freeMode.enabled&&!u.params.freeMode.sticky&&p()}),a("scrollbarDragMove resize _freeModeNoMomentumRelease",()=>{u.params.lazy.enabled&&(u.params.lazy.checkInView?f:p)()}),a("transitionStart",()=>{u.params.lazy.enabled&&(!u.params.lazy.loadOnTransitionStart&&(u.params.lazy.loadOnTransitionStart||c)||(u.params.lazy.checkInView?f:p)())}),a("transitionEnd",()=>{u.params.lazy.enabled&&!u.params.lazy.loadOnTransitionStart&&(u.params.lazy.checkInView?f:p)()}),a("slideChange",()=>{var{lazy:e,cssMode:t,watchSlidesProgress:a,touchReleaseOnEdges:s,resistanceRatio:i}=u.params;e.enabled&&(t||a&&(s||0===i))&&p()}),Object.assign(u.lazy,{load:p,loadInSlide:m})},function(e){let{swiper:l,extendParams:t,on:a}=e;function o(e,t){const a=function(){let a,s,i;return(e,t)=>{for(s=-1,a=e.length;1<a-s;)e[i=a+s>>1]<=t?s=i:a=i;return a}}();this.x=e,this.y=t,this.lastIndex=e.length-1;let s,i;return this.interpolate=function(e){return e?(i=a(this.x,e),s=i-1,(e-this.x[s])*(this.y[i]-this.y[s])/(this.x[i]-this.x[s])+this.y[s]):0},this}function s(){l.controller.control&&l.controller.spline&&(l.controller.spline=void 0,delete l.controller.spline)}t({controller:{control:void 0,inverse:!1,by:"slide"}}),l.controller={control:void 0},a("beforeInit",()=>{l.controller.control=l.params.controller.control}),a("update",()=>{s()}),a("resize",()=>{s()}),a("observerUpdate",()=>{s()}),a("setTranslate",(e,t,a)=>{l.controller.control&&l.controller.setTranslate(t,a)}),a("setTransition",(e,t,a)=>{l.controller.control&&l.controller.setTransition(t,a)}),Object.assign(l.controller,{setTranslate:function(e,t){var a=l.controller.control;let s,i;var r=l.constructor;function n(e){var t,a=l.rtlTranslate?-l.translate:l.translate;"slide"===l.params.controller.by&&(t=e,l.controller.spline||(l.controller.spline=l.params.loop?new o(l.slidesGrid,t.slidesGrid):new o(l.snapGrid,t.snapGrid)),i=-l.controller.spline.interpolate(-a)),i&&"container"!==l.params.controller.by||(s=(e.maxTranslate()-e.minTranslate())/(l.maxTranslate()-l.minTranslate()),i=(a-l.minTranslate())*s+e.minTranslate()),l.params.controller.inverse&&(i=e.maxTranslate()-i),e.updateProgress(i),e.setTranslate(i,l),e.updateActiveIndex(),e.updateSlidesClasses()}if(Array.isArray(a))for(let e=0;e<a.length;e+=1)a[e]!==t&&a[e]instanceof r&&n(a[e]);else a instanceof r&&t!==a&&n(a)},setTransition:function(t,e){var a=l.constructor;const s=l.controller.control;let i;function r(e){e.setTransition(t,l),0!==t&&(e.transitionStart(),e.params.autoHeight&&C(()=>{e.updateAutoHeight()}),e.$wrapperEl.transitionEnd(()=>{s&&(e.params.loop&&"slide"===l.params.controller.by&&e.loopFix(),e.transitionEnd())}))}if(Array.isArray(s))for(i=0;i<s.length;i+=1)s[i]!==e&&s[i]instanceof a&&r(s[i]);else s instanceof a&&e!==s&&r(s)}})},function(t){let{swiper:l,extendParams:r,on:e}=t,o=(r({a11y:{enabled:!0,notificationClass:"swiper-notification",prevSlideMessage:"Previous slide",nextSlideMessage:"Next slide",firstSlideMessage:"This is the first slide",lastSlideMessage:"This is the last slide",paginationBulletMessage:"Go to slide {{index}}",slideLabelMessage:"{{index}} / {{slidesLength}}",containerMessage:null,containerRoleDescriptionMessage:null,itemRoleDescriptionMessage:null,slideRole:"group",id:null}}),null);function s(e){const t=o;0!==t.length&&(t.html(""),t.html(e))}function i(e){e.attr("tabIndex","0")}function a(e){e.attr("tabIndex","-1")}function d(e,t){e.attr("role",t)}function p(e,t){e.attr("aria-roledescription",t)}function c(e,t){e.attr("aria-label",t)}function n(e){e.attr("aria-disabled",!0)}function h(e){e.attr("aria-disabled",!1)}function u(e){if(13===e.keyCode||32===e.keyCode){var t=l.params.a11y;const a=I(e.target);l.navigation&&l.navigation.$nextEl&&a.is(l.navigation.$nextEl)&&(l.isEnd&&!l.params.loop||l.slideNext(),l.isEnd?s(t.lastSlideMessage):s(t.nextSlideMessage)),l.navigation&&l.navigation.$prevEl&&a.is(l.navigation.$prevEl)&&(l.isBeginning&&!l.params.loop||l.slidePrev(),l.isBeginning?s(t.firstSlideMessage):s(t.prevSlideMessage)),l.pagination&&a.is(b(l.params.pagination.bulletClass))&&a[0].click()}}function m(){return l.pagination&&l.pagination.bullets&&l.pagination.bullets.length}function f(){return m()&&l.params.pagination.clickable}const v=(e,t,a)=>{i(e),"BUTTON"!==e[0].tagName&&(d(e,"button"),e.on("keydown",u)),c(e,a),e.attr("aria-controls",t)},g=e=>{var t,a,e=e.target.closest("."+l.params.slideClass);e&&l.slides.includes(e)&&(t=l.slides.indexOf(e)===l.activeIndex,a=l.params.watchSlidesProgress&&l.visibleSlides&&l.visibleSlides.includes(e),t||a||l.slideTo(l.slides.indexOf(e),0))};function w(){const s=l.params.a11y;l.$el.append(o);var e=l.$el;s.containerRoleDescriptionMessage&&p(e,s.containerRoleDescriptionMessage),s.containerMessage&&c(e,s.containerMessage);const t=l.$wrapperEl;var e=s.id||t.attr("id")||"swiper-wrapper-"+"x".repeat(e=void 0===(e=16)?16:e).replace(/x/g,()=>Math.round(16*Math.random()).toString(16)),a=l.params.autoplay&&l.params.autoplay.enabled?"off":"polite";t.attr("id",e),t.attr("aria-live",a),s.itemRoleDescriptionMessage&&p(I(l.slides),s.itemRoleDescriptionMessage),d(I(l.slides),s.slideRole);const i=(l.params.loop?l.slides.filter(e=>!e.classList.contains(l.params.slideDuplicateClass)):l.slides).length;l.slides.each((e,t)=>{const a=I(e);e=l.params.loop?parseInt(a.attr("data-swiper-slide-index"),10):t,t=s.slideLabelMessage.replace(/\{\{index\}\}/,e+1).replace(/\{\{slidesLength\}\}/,i);c(a,t)});let r,n;l.navigation&&l.navigation.$nextEl&&(r=l.navigation.$nextEl),l.navigation&&l.navigation.$prevEl&&(n=l.navigation.$prevEl),r&&r.length&&v(r,e,s.nextSlideMessage),n&&n.length&&v(n,e,s.prevSlideMessage),f()&&l.pagination.$el.on("keydown",b(l.params.pagination.bulletClass),u),l.$el.on("focus",g,!0)}e("beforeInit",()=>{o=I(`<span class="${l.params.a11y.notificationClass}" aria-live="assertive" aria-atomic="true"></span>`)}),e("afterInit",()=>{l.params.a11y.enabled&&w()}),e("fromEdge toEdge afterInit lock unlock",()=>{var e,t;l.params.a11y.enabled&&(l.params.loop||l.params.rewind||!l.navigation||({$nextEl:e,$prevEl:t}=l.navigation,t&&0<t.length&&(l.isBeginning?(n(t),a(t)):(h(t),i(t))),e&&0<e.length&&(l.isEnd?(n(e),a(e)):(h(e),i(e)))))}),e("paginationUpdate",()=>{if(l.params.a11y.enabled){const a=l.params.a11y;m()&&l.pagination.bullets.each(e=>{const t=I(e);l.params.pagination.clickable&&(i(t),l.params.pagination.renderBullet||(d(t,"button"),c(t,a.paginationBulletMessage.replace(/\{\{index\}\}/,t.index()+1)))),t.is("."+l.params.pagination.bulletActiveClass)?t.attr("aria-current","true"):t.removeAttr("aria-current")})}else;}),e("destroy",()=>{if(l.params.a11y.enabled){o&&0<o.length&&o.remove();let e,t;l.navigation&&l.navigation.$nextEl&&(e=l.navigation.$nextEl),l.navigation&&l.navigation.$prevEl&&(t=l.navigation.$prevEl),e&&e.off("keydown",u),t&&t.off("keydown",u),f()&&l.pagination.$el.off("keydown",b(l.params.pagination.bulletClass),u),l.$el.off("focus",g,!0)}else;})},function(e){let{swiper:l,extendParams:p,on:t}=e,n=(p({history:{enabled:!1,root:"",replaceState:!1,key:"slides"}}),!1),a={};const o=e=>e.toString().replace(/\s+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,""),s=e=>{var t=O();let a;e=(a=e?new URL(e):t.location).pathname.slice(1).split("/").filter(e=>""!==e),t=e.length;return{key:e[t-2],value:e[t-1]}},i=(a,s)=>{const i=O();if(n&&l.params.history.enabled){let e;e=l.params.url?new URL(l.params.url):i.location;const r=l.slides.eq(s);let t=o(r.attr("data-history"));if(0<l.params.history.root.length){let e=l.params.history.root;"/"===e[e.length-1]&&(e=e.slice(0,e.length-1)),t=e+`/${a}/`+t}else e.pathname.includes(a)||(t=a+"/"+t);s=i.history.state;s&&s.value===t||(l.params.history.replaceState?i.history.replaceState({value:t},null,t):i.history.pushState({value:t},null,t))}},r=(a,s,i)=>{if(s)for(let e=0,t=l.slides.length;e<t;e+=1){const n=l.slides.eq(e);var r;o(n.attr("data-history"))!==s||n.hasClass(l.params.slideDuplicateClass)||(r=n.index(),l.slideTo(r,a,i))}else l.slideTo(0,a,i)},d=()=>{a=s(l.params.url),r(l.params.speed,l.paths.value,!1)};t("init",()=>{if(l.params.history.enabled){const e=O();if(l.params.history){if(!e.history||!e.history.pushState)return void(l.params.history.enabled=!1,l.params.hashNavigation.enabled=!0);n=!0,((a=s(l.params.url)).key||a.value)&&(r(0,a.value,l.params.runCallbacksOnInit),l.params.history.replaceState||e.addEventListener("popstate",d))}}else;}),t("destroy",()=>{if(l.params.history.enabled){const e=O();l.params.history.replaceState||e.removeEventListener("popstate",d)}else;}),t("transitionEnd _freeModeNoMomentumRelease",()=>{n&&i(l.params.history.key,l.activeIndex)}),t("slideChange",()=>{n&&l.params.cssMode&&i(l.params.history.key,l.activeIndex)})},function(e){let{swiper:r,extendParams:t,emit:a,on:s}=e,n=!1;const l=T(),o=O(),d=(t({hashNavigation:{enabled:!1,replaceState:!1,watchState:!1}}),()=>{a("hashChange");var e=l.location.hash.replace("#","");e===r.slides.eq(r.activeIndex).attr("data-hash")||void 0!==(e=r.$wrapperEl.children(`.${r.params.slideClass}[data-hash="${e}"]`).index())&&r.slideTo(e)}),i=()=>{if(n&&r.params.hashNavigation.enabled)if(r.params.hashNavigation.replaceState&&o.history&&o.history.replaceState)o.history.replaceState(null,null,"#"+r.slides.eq(r.activeIndex).attr("data-hash")||""),a("hashSet");else{const t=r.slides.eq(r.activeIndex);var e=t.attr("data-hash")||t.attr("data-history");l.location.hash=e||"",a("hashSet")}};s("init",()=>{if(r.params.hashNavigation.enabled&&!(!r.params.hashNavigation.enabled||r.params.history&&r.params.history.enabled)){n=!0;var a=l.location.hash.replace("#","");if(a){var s;for(let e=0,t=r.slides.length;e<t;e+=1){const i=r.slides.eq(e);(i.attr("data-hash")||i.attr("data-history"))!==a||i.hasClass(r.params.slideDuplicateClass)||(s=i.index(),r.slideTo(s,0,r.params.runCallbacksOnInit,!0))}}r.params.hashNavigation.watchState&&I(o).on("hashchange",d)}}),s("destroy",()=>{r.params.hashNavigation.enabled&&r.params.hashNavigation.watchState&&I(o).off("hashchange",d)}),s("transitionEnd _freeModeNoMomentumRelease",()=>{n&&i()}),s("slideChange",()=>{n&&r.params.cssMode&&i()})},function(p){let{swiper:s,extendParams:c,on:e,emit:a}=p,i;function r(){const e=s.slides.eq(s.activeIndex);let t=s.params.autoplay.delay;e.attr("data-swiper-autoplay")&&(t=e.attr("data-swiper-autoplay")||s.params.autoplay.delay),clearTimeout(i),i=C(()=>{let e;s.params.autoplay.reverseDirection?s.params.loop?(s.loopFix(),e=s.slidePrev(s.params.speed,!0,!0),a("autoplay")):s.isBeginning?s.params.autoplay.stopOnLastSlide?n():(e=s.slideTo(s.slides.length-1,s.params.speed,!0,!0),a("autoplay")):(e=s.slidePrev(s.params.speed,!0,!0),a("autoplay")):s.params.loop?(s.loopFix(),e=s.slideNext(s.params.speed,!0,!0),a("autoplay")):s.isEnd?s.params.autoplay.stopOnLastSlide?n():(e=s.slideTo(0,s.params.speed,!0,!0),a("autoplay")):(e=s.slideNext(s.params.speed,!0,!0),a("autoplay")),(s.params.cssMode&&s.autoplay.running||!1===e)&&r()},t)}function t(){return void 0===i&&(!s.autoplay.running&&(s.autoplay.running=!0,a("autoplayStart"),r(),!0))}function n(){return!!s.autoplay.running&&(void 0!==i&&(i&&(clearTimeout(i),i=void 0),s.autoplay.running=!1,a("autoplayStop"),!0))}function l(e){s.autoplay.running&&(s.autoplay.paused||(i&&clearTimeout(i),s.autoplay.paused=!0,0!==e&&s.params.autoplay.waitForTransition?["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].addEventListener(e,d)}):(s.autoplay.paused=!1,r())))}function o(){var e=T();"hidden"===e.visibilityState&&s.autoplay.running&&l(),"visible"===e.visibilityState&&s.autoplay.paused&&(r(),s.autoplay.paused=!1)}function d(e){s&&!s.destroyed&&s.$wrapperEl&&e.target===s.$wrapperEl[0]&&(["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].removeEventListener(e,d)}),s.autoplay.paused=!1,(s.autoplay.running?r:n)())}function u(){s.params.autoplay.disableOnInteraction?n():(a("autoplayPause"),l()),["transitionend","webkitTransitionEnd"].forEach(e=>{s.$wrapperEl[0].removeEventListener(e,d)})}function h(){s.params.autoplay.disableOnInteraction||(s.autoplay.paused=!1,a("autoplayResume"),r())}s.autoplay={running:!1,paused:!1},c({autoplay:{enabled:!1,delay:3e3,waitForTransition:!0,disableOnInteraction:!0,stopOnLastSlide:!1,reverseDirection:!1,pauseOnMouseEnter:!1}}),e("init",()=>{if(s.params.autoplay.enabled){t();const e=T();e.addEventListener("visibilitychange",o),s.params.autoplay.pauseOnMouseEnter&&(s.$el.on("mouseenter",u),s.$el.on("mouseleave",h))}}),e("beforeTransitionStart",(e,t,a)=>{s.autoplay.running&&(a||!s.params.autoplay.disableOnInteraction?s.autoplay.pause(t):n())}),e("sliderFirstMove",()=>{s.autoplay.running&&(s.params.autoplay.disableOnInteraction?n:l)()}),e("touchEnd",()=>{s.params.cssMode&&s.autoplay.paused&&!s.params.autoplay.disableOnInteraction&&r()}),e("destroy",()=>{s.$el.off("mouseenter",u),s.$el.off("mouseleave",h),s.autoplay.running&&n();const e=T();e.removeEventListener("visibilitychange",o)}),Object.assign(s.autoplay,{pause:l,run:r,start:t,stop:n})},function(e){let{swiper:p,extendParams:t,on:a}=e,s=(t({thumbs:{swiper:null,multipleActiveThumbs:!0,autoScrollOffset:0,slideThumbActiveClass:"swiper-slide-thumb-active",thumbsContainerClass:"swiper-thumbs"}}),!1),i=!1;function r(){var a=p.thumbs.swiper;if(a&&!a.destroyed){var e=a.clickedIndex,s=a.clickedSlide;if(!(s&&I(s).hasClass(p.params.thumbs.slideThumbActiveClass)||null==e)){let t;if(t=a.params.loop?parseInt(I(a.clickedSlide).attr("data-swiper-slide-index"),10):e,p.params.loop){let e=p.activeIndex;p.slides.eq(e).hasClass(p.params.slideDuplicateClass)&&(p.loopFix(),p._clientLeft=p.$wrapperEl[0].clientLeft,e=p.activeIndex);s=p.slides.eq(e).prevAll(`[data-swiper-slide-index="${t}"]`).eq(0).index(),a=p.slides.eq(e).nextAll(`[data-swiper-slide-index="${t}"]`).eq(0).index();t=void 0===s||void 0!==a&&a-e<e-s?a:s}p.slideTo(t)}}}function n(){var e=p.params["thumbs"];if(s)return!1;s=!0;const t=p.constructor;return e.swiper instanceof t?(p.thumbs.swiper=e.swiper,Object.assign(p.thumbs.swiper.originalParams,{watchSlidesProgress:!0,slideToClickedSlide:!1}),Object.assign(p.thumbs.swiper.params,{watchSlidesProgress:!0,slideToClickedSlide:!1})):u(e.swiper)&&(e=Object.assign({},e.swiper),Object.assign(e,{watchSlidesProgress:!0,slideToClickedSlide:!1}),p.thumbs.swiper=new t(e),i=!0),p.thumbs.swiper.$el.addClass(p.params.thumbs.thumbsContainerClass),p.thumbs.swiper.on("tap",r),!0}function l(s){const i=p.thumbs.swiper;if(i&&!i.destroyed){var r,n,l="auto"===i.params.slidesPerView?i.slidesPerViewDynamic():i.params.slidesPerView,o=p.params.thumbs.autoScrollOffset,d=o&&!i.params.loop;if(p.realIndex!==i.realIndex||d){let e=i.activeIndex,t,a;a=i.params.loop?(i.slides.eq(e).hasClass(i.params.slideDuplicateClass)&&(i.loopFix(),i._clientLeft=i.$wrapperEl[0].clientLeft,e=i.activeIndex),r=i.slides.eq(e).prevAll(`[data-swiper-slide-index="${p.realIndex}"]`).eq(0).index(),n=i.slides.eq(e).nextAll(`[data-swiper-slide-index="${p.realIndex}"]`).eq(0).index(),t=void 0===r?n:void 0===n?r:n-e==e-r?1<i.params.slidesPerGroup?n:e:n-e<e-r?n:r,p.activeIndex>p.previousIndex?"next":"prev"):(t=p.realIndex)>p.previousIndex?"next":"prev",d&&(t+="next"===a?o:-1*o),i.visibleSlidesIndexes&&i.visibleSlidesIndexes.indexOf(t)<0&&(i.params.centeredSlides?t=t>e?t-Math.floor(l/2)+1:t+Math.floor(l/2)-1:t>e&&i.params.slidesPerGroup,i.slideTo(t,s?0:void 0))}let t=1;var a=p.params.thumbs.slideThumbActiveClass;if(1<p.params.slidesPerView&&!p.params.centeredSlides&&(t=p.params.slidesPerView),p.params.thumbs.multipleActiveThumbs||(t=1),t=Math.floor(t),i.slides.removeClass(a),i.params.loop||i.params.virtual&&i.params.virtual.enabled)for(let e=0;e<t;e+=1)i.$wrapperEl.children(`[data-swiper-slide-index="${p.realIndex+e}"]`).addClass(a);else for(let e=0;e<t;e+=1)i.slides.eq(p.realIndex+e).addClass(a)}}p.thumbs={swiper:null},a("beforeInit",()=>{var e=p.params["thumbs"];e&&e.swiper&&(n(),l(!0))}),a("slideChange update resize observerUpdate",()=>{l()}),a("setTransition",(e,t)=>{const a=p.thumbs.swiper;a&&!a.destroyed&&a.setTransition(t)}),a("beforeDestroy",()=>{const e=p.thumbs.swiper;e&&!e.destroyed&&i&&e.destroy()}),Object.assign(p.thumbs,{init:n,update:l})},function(e){let{swiper:h,extendParams:t,emit:m,once:f}=e;t({freeMode:{enabled:!1,momentum:!0,momentumRatio:1,momentumBounce:!0,momentumBounceRatio:1,momentumVelocityRatio:1,sticky:!1,minimumVelocity:.02}}),Object.assign(h,{freeMode:{onTouchStart:function(){var e=h.getTranslate();h.setTranslate(e),h.setTransition(0),h.touchEventsData.velocities.length=0,h.freeMode.onTouchEnd({currentPos:h.rtl?h.translate:-h.translate})},onTouchMove:function(){const{touchEventsData:e,touches:t}=h;0===e.velocities.length&&e.velocities.push({position:t[h.isHorizontal()?"startX":"startY"],time:e.touchStartTime}),e.velocities.push({position:t[h.isHorizontal()?"currentX":"currentY"],time:g()})},onTouchEnd:function(r){r=r.currentPos;const{params:n,$wrapperEl:l,rtlTranslate:o,snapGrid:d,touchEventsData:p}=h;var e=g()-p.touchStartTime;if(r<-h.minTranslate())h.slideTo(h.activeIndex);else if(r>-h.maxTranslate())h.slides.length<d.length?h.slideTo(d.length-1):h.slideTo(h.slides.length-1);else{if(n.freeMode.momentum){1<p.velocities.length?(r=p.velocities.pop(),u=p.velocities.pop(),c=r.position-u.position,u=r.time-u.time,h.velocity=c/u,h.velocity/=2,Math.abs(h.velocity)<n.freeMode.minimumVelocity&&(h.velocity=0),(150<u||300<g()-r.time)&&(h.velocity=0)):h.velocity=0,h.velocity*=n.freeMode.momentumVelocityRatio,p.velocities.length=0;let e=1e3*n.freeMode.momentumRatio;var c=h.velocity*e;let a=h.translate+c,t=(o&&(a=-a),!1),s;var u=20*Math.abs(h.velocity)*n.freeMode.momentumBounceRatio;let i;if(a<h.maxTranslate())n.freeMode.momentumBounce?(a+h.maxTranslate()<-u&&(a=h.maxTranslate()-u),s=h.maxTranslate(),t=!0,p.allowMomentumBounce=!0):a=h.maxTranslate(),n.loop&&n.centeredSlides&&(i=!0);else if(a>h.minTranslate())n.freeMode.momentumBounce?(a-h.minTranslate()>u&&(a=h.minTranslate()+u),s=h.minTranslate(),t=!0,p.allowMomentumBounce=!0):a=h.minTranslate(),n.loop&&n.centeredSlides&&(i=!0);else if(n.freeMode.sticky){let t;for(let e=0;e<d.length;e+=1)if(d[e]>-a){t=e;break}a=-(a=Math.abs(d[t]-a)<Math.abs(d[t-1]-a)||"next"===h.swipeDirection?d[t]:d[t-1])}if(i&&f("transitionEnd",()=>{h.loopFix()}),0!==h.velocity)e=o?Math.abs((-a-h.translate)/h.velocity):Math.abs((a-h.translate)/h.velocity),n.freeMode.sticky&&(r=Math.abs((o?-a:a)-h.translate),c=h.slidesSizesGrid[h.activeIndex],e=r<c?n.speed:r<2*c?1.5*n.speed:2.5*n.speed);else if(n.freeMode.sticky)return void h.slideToClosest();n.freeMode.momentumBounce&&t?(h.updateProgress(s),h.setTransition(e),h.setTranslate(a),h.transitionStart(!0,h.swipeDirection),h.animating=!0,l.transitionEnd(()=>{h&&!h.destroyed&&p.allowMomentumBounce&&(m("momentumBounce"),h.setTransition(n.speed),setTimeout(()=>{h.setTranslate(s),l.transitionEnd(()=>{h&&!h.destroyed&&h.transitionEnd()})},0))})):h.velocity?(m("_freeModeNoMomentumRelease"),h.updateProgress(a),h.setTransition(e),h.setTranslate(a),h.transitionStart(!0,h.swipeDirection),h.animating||(h.animating=!0,l.transitionEnd(()=>{h&&!h.destroyed&&h.transitionEnd()}))):h.updateProgress(a),h.updateActiveIndex(),h.updateSlidesClasses()}else{if(n.freeMode.sticky)return void h.slideToClosest();n.freeMode&&m("_freeModeNoMomentumRelease")}(!n.freeMode.momentum||e>=n.longSwipesMs)&&(h.updateProgress(),h.updateActiveIndex(),h.updateSlidesClasses())}}}})},function(e){let{swiper:u,extendParams:t}=e;t({grid:{rows:1,fill:"column"}});let h,m,f;u.grid={initSlides:e=>{var t=u.params["slidesPerView"],{rows:a,fill:s}=u.params.grid;m=h/a,f=Math.floor(e/a),h=Math.floor(e/a)===e/a?e:Math.ceil(e/a)*a,"auto"!==t&&"row"===s&&(h=Math.max(h,t*a))},updateSlide:(e,t,a,p)=>{var s,i,{slidesPerGroup:r,spaceBetween:n}=u.params,{rows:l,fill:c}=u.params.grid;let o,d;"row"===c&&1<r?(i=e-l*r*(s=Math.floor(e/(r*l))),a=0===s?r:Math.min(Math.ceil((a-s*l*r)/l),r),d=Math.floor(i/a),i=(o=i-d*a+s*r)+d*h/l,t.css({"-webkit-order":i,order:i})):"column"===c?(o=Math.floor(e/l),d=e-o*l,(o>f||o===f&&d===l-1)&&(d+=1)>=l&&(d=0,o+=1)):(d=Math.floor(e/m),o=e-d*m),t.css(p("margin-top"),0!==d?n&&n+"px":"")},updateWrapperSize:(e,a,t)=>{var{spaceBetween:s,centeredSlides:i,roundLengths:r}=u.params,n=u.params.grid["rows"];if(u.virtualSize=(e+s)*h,u.virtualSize=Math.ceil(u.virtualSize/n)-s,u.$wrapperEl.css({[t("width")]:u.virtualSize+s+"px"}),i){a.splice(0,a.length);const l=[];for(let t=0;t<a.length;t+=1){let e=a[t];r&&(e=Math.floor(e)),a[t]<u.virtualSize+a[0]&&l.push(e)}a.push(...l)}}}},function(e){e=e.swiper,Object.assign(e,{appendSlide:function(t){const{$wrapperEl:a,params:e}=this;if(e.loop&&this.loopDestroy(),"object"==typeof t&&"length"in t)for(let e=0;e<t.length;e+=1)t[e]&&a.append(t[e]);else a.append(t);e.loop&&this.loopCreate(),e.observer||this.update()}.bind(e),prependSlide:function(t){var e=this;const{params:a,$wrapperEl:s,activeIndex:i}=e;a.loop&&e.loopDestroy();let r=i+1;if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)t[e]&&s.prepend(t[e]);r=i+t.length}else s.prepend(t);a.loop&&e.loopCreate(),a.observer||e.update(),e.slideTo(r,0,!1)}.bind(e),addSlide:function(t,a){var s=this;const{$wrapperEl:i,params:r,activeIndex:e}=s;let n=e;r.loop&&(n-=s.loopedSlides,s.loopDestroy(),s.slides=i.children("."+r.slideClass));var l=s.slides.length;if(t<=0)s.prependSlide(a);else if(l<=t)s.appendSlide(a);else{let e=n>t?n+1:n;const o=[];for(let e=l-1;e>=t;--e){const d=s.slides.eq(e);d.remove(),o.unshift(d)}if("object"==typeof a&&"length"in a){for(let e=0;e<a.length;e+=1)a[e]&&i.append(a[e]);e=n>t?n+a.length:n}else i.append(a);for(let e=0;e<o.length;e+=1)i.append(o[e]);r.loop&&s.loopCreate(),r.observer||s.update(),r.loop?s.slideTo(e+s.loopedSlides,0,!1):s.slideTo(e,0,!1)}}.bind(e),removeSlide:function(t){var a=this;const{params:e,$wrapperEl:s,activeIndex:i}=a;let r=i,n=(e.loop&&(r-=a.loopedSlides,a.loopDestroy(),a.slides=s.children("."+e.slideClass)),r),l;if("object"==typeof t&&"length"in t){for(let e=0;e<t.length;e+=1)l=t[e],a.slides[l]&&a.slides.eq(l).remove(),l<n&&--n;n=Math.max(n,0)}else l=t,a.slides[l]&&a.slides.eq(l).remove(),l<n&&--n,n=Math.max(n,0);e.loop&&a.loopCreate(),e.observer||a.update(),e.loop?a.slideTo(n+a.loopedSlides,0,!1):a.slideTo(n,0,!1)}.bind(e),removeAllSlides:function(){const t=[];for(let e=0;e<this.slides.length;e+=1)t.push(e);this.removeSlide(t)}.bind(e)})},function(e){let{swiper:l,extendParams:t,on:a}=e;t({fadeEffect:{crossFade:!1,transformEl:null}}),i({effect:"fade",swiper:l,on:a,setTranslate:()=>{var e=l["slides"],s=l.params.fadeEffect;for(let a=0;a<e.length;a+=1){var i=l.slides.eq(a);let e=-i[0].swiperSlideOffset,t=(l.params.virtualTranslate||(e-=l.translate),0);l.isHorizontal()||(t=e,e=0);var r=l.params.fadeEffect.crossFade?Math.max(1-Math.abs(i[0].progress),0):1+Math.min(Math.max(i[0].progress,-1),0);const n=B(s,i);n.css({opacity:r}).transform(`translate3d(${e}px, ${t}px, 0px)`)}},setTransition:e=>{var t=l.params.fadeEffect["transformEl"];const a=t?l.slides.find(t):l.slides;a.transition(e),N({swiper:l,duration:e,transformEl:t,allSlides:!0})},overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!l.params.cssMode})})},function(e){let{swiper:b,extendParams:t,on:a}=e;t({cubeEffect:{slideShadows:!0,shadow:!0,shadowOffset:20,shadowScale:.94}}),i({effect:"cube",swiper:b,on:a,setTranslate:()=>{const{$el:i,$wrapperEl:e,slides:h,width:t,height:r,rtlTranslate:m,size:l,browser:n}=b;var a,f,o=b.params.cubeEffect,d=b.isHorizontal(),v=b.virtual&&b.params.virtual.enabled;let p=0,s;o.shadow&&(d?(0===(s=e.find(".swiper-cube-shadow")).length&&(s=I('<div class="swiper-cube-shadow"></div>'),e.append(s)),s.css({height:t+"px"})):0===(s=i.find(".swiper-cube-shadow")).length&&(s=I('<div class="swiper-cube-shadow"></div>'),i.append(s)));for(let n=0;n<h.length;n+=1){const u=h.eq(n);let e=n,t=90*(e=v?parseInt(u.attr("data-swiper-slide-index"),10):e),a=Math.floor(t/360);m&&(t=-t,a=Math.floor(-t/360));var c=Math.max(Math.min(u[0].progress,1),-1);let s=0,i=0,r=0;e%4==0?(s=4*-a*l,r=0):(e-1)%4==0?(s=0,r=4*-a*l):(e-2)%4==0?(s=l+4*a*l,r=l):(e-3)%4==0&&(s=-l,r=3*l+4*l*a),m&&(s=-s),d||(i=s,s=0);var g=`rotateX(${d?0:-t}deg) rotateY(${d?t:0}deg) translate3d(${s}px, ${i}px, ${r}px)`;if(c<=1&&-1<c&&(p=90*e+90*c,m&&(p=90*-e-90*c)),u.transform(g),o.slideShadows){let e=d?u.find(".swiper-slide-shadow-left"):u.find(".swiper-slide-shadow-top"),t=d?u.find(".swiper-slide-shadow-right"):u.find(".swiper-slide-shadow-bottom");0===e.length&&(e=I(`<div class="swiper-slide-shadow-${d?"left":"top"}"></div>`),u.append(e)),0===t.length&&(t=I(`<div class="swiper-slide-shadow-${d?"right":"bottom"}"></div>`),u.append(t)),e.length&&(e[0].style.opacity=Math.max(-c,0)),t.length&&(t[0].style.opacity=Math.max(c,0))}}e.css({"-webkit-transform-origin":`50% 50% -${l/2}px`,"transform-origin":`50% 50% -${l/2}px`}),o.shadow&&(d?s.transform(`translate3d(0px, ${t/2+o.shadowOffset}px, ${-t/2}px) rotateX(90deg) rotateZ(0deg) scale(${o.shadowScale})`):(a=Math.abs(p)-90*Math.floor(Math.abs(p)/90),a=1.5-(Math.sin(2*a*Math.PI/360)/2+Math.cos(2*a*Math.PI/360)/2),w=o.shadowScale,a=o.shadowScale/a,f=o.shadowOffset,s.transform(`scale3d(${w}, 1, ${a}) translate3d(0px, ${r/2+f}px, ${-r/2/a}px) rotateX(-90deg)`)));var w=n.isSafari||n.isWebView?-l/2:0;e.transform(`translate3d(0px,0,${w}px) rotateX(${b.isHorizontal()?0:p}deg) rotateY(${b.isHorizontal()?-p:0}deg)`)},setTransition:e=>{const{$el:t,slides:a}=b;a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),b.params.cubeEffect.shadow&&!b.isHorizontal()&&t.find(".swiper-cube-shadow").transition(e)},perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,resistanceRatio:0,spaceBetween:0,centeredSlides:!1,virtualTranslate:!0})})},function(e){let{swiper:u,extendParams:t,on:a}=e;t({flipEffect:{slideShadows:!0,limitRotation:!0,transformEl:null}}),i({effect:"flip",swiper:u,on:a,setTranslate:()=>{const{slides:n,rtlTranslate:l}=u;var o=u.params.flipEffect;for(let r=0;r<n.length;r+=1){const p=n.eq(r);let a=p[0].progress;u.params.flipEffect.limitRotation&&(a=Math.max(Math.min(p[0].progress,1),-1));var d=p[0].swiperSlideOffset;let e=-180*a,t=0,s=u.params.cssMode?-d-u.translate:-d,i=0;if(u.isHorizontal()?l&&(e=-e):(i=s,s=0,t=-e,e=0),p[0].style.zIndex=-Math.abs(Math.round(a))+n.length,o.slideShadows){let e=u.isHorizontal()?p.find(".swiper-slide-shadow-left"):p.find(".swiper-slide-shadow-top"),t=u.isHorizontal()?p.find(".swiper-slide-shadow-right"):p.find(".swiper-slide-shadow-bottom");0===e.length&&(e=H(o,p,u.isHorizontal()?"left":"top")),0===t.length&&(t=H(o,p,u.isHorizontal()?"right":"bottom")),e.length&&(e[0].style.opacity=Math.max(-a,0)),t.length&&(t[0].style.opacity=Math.max(a,0))}d=`translate3d(${s}px, ${i}px, 0px) rotateX(${t}deg) rotateY(${e}deg)`;const c=B(o,p);c.transform(d)}},setTransition:e=>{var t=u.params.flipEffect["transformEl"];const a=t?u.slides.find(t):u.slides;a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e),N({swiper:u,duration:e,transformEl:t})},perspective:()=>!0,overwriteParams:()=>({slidesPerView:1,slidesPerGroup:1,watchSlidesProgress:!0,spaceBetween:0,virtualTranslate:!u.params.cssMode})})},function(e){let{swiper:s,extendParams:t,on:a}=e;t({coverflowEffect:{rotate:50,stretch:0,depth:100,scale:1,modifier:1,slideShadows:!0,transformEl:null}}),i({effect:"coverflow",swiper:s,on:a,setTranslate:()=>{const{width:e,height:a,slides:o,slidesSizesGrid:v}=s,d=s.params.coverflowEffect;var p=s.isHorizontal(),t=s.translate,g=p?e/2-t:a/2-t,c=p?d.rotate:-d.rotate,w=d.depth;for(let l=0,e=o.length;l<e;l+=1){const m=o.eq(l);var u=v[l],h=(g-m[0].swiperSlideOffset-u/2)/u,h="function"==typeof d.modifier?d.modifier(h):h*d.modifier;let e=p?c*h:0,t=p?0:c*h,a=-w*Math.abs(h),s=d.stretch,i=("string"==typeof s&&-1!==s.indexOf("%")&&(s=parseFloat(d.stretch)/100*u),p?0:s*h),r=p?s*h:0,n=1-(1-d.scale)*Math.abs(h);Math.abs(r)<.001&&(r=0),Math.abs(i)<.001&&(i=0),Math.abs(a)<.001&&(a=0),Math.abs(e)<.001&&(e=0),Math.abs(t)<.001&&(t=0),Math.abs(n)<.001&&(n=0);u=`translate3d(${r}px,${i}px,${a}px)  rotateX(${t}deg) rotateY(${e}deg) scale(${n})`;const f=B(d,m);if(f.transform(u),m[0].style.zIndex=1-Math.abs(Math.round(h)),d.slideShadows){let e=p?m.find(".swiper-slide-shadow-left"):m.find(".swiper-slide-shadow-top"),t=p?m.find(".swiper-slide-shadow-right"):m.find(".swiper-slide-shadow-bottom");0===e.length&&(e=H(d,m,p?"left":"top")),0===t.length&&(t=H(d,m,p?"right":"bottom")),e.length&&(e[0].style.opacity=0<h?h:0),t.length&&(t[0].style.opacity=0<-h?-h:0)}}},setTransition:e=>{var t=s.params.coverflowEffect["transformEl"];const a=t?s.slides.find(t):s.slides;a.transition(e).find(".swiper-slide-shadow-top, .swiper-slide-shadow-right, .swiper-slide-shadow-bottom, .swiper-slide-shadow-left").transition(e)},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0})})},function(e){let{swiper:g,extendParams:t,on:a}=e;t({creativeEffect:{transformEl:null,limitProgress:1,shadowPerProgress:!1,progressMultiplier:1,perspective:!0,prev:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1},next:{translate:[0,0,0],rotate:[0,0,0],opacity:1,scale:1}}}),i({effect:"creative",swiper:g,on:a,setTranslate:()=>{const{slides:i,$wrapperEl:e,slidesSizesGrid:t}=g;var r=g.params.creativeEffect;const n=r["progressMultiplier"];var a,m=g.params.centeredSlides;m&&(a=t[0]/2-g.params.slidesOffsetBefore||0,e.transform(`translateX(calc(50% - ${a}px))`));for(let s=0;s<i.length;s+=1){const d=i.eq(s);var l=d[0].progress;const p=Math.min(Math.max(d[0].progress,-r.limitProgress),r.limitProgress);let e=p;m||(e=Math.min(Math.max(d[0].originalProgress,-r.limitProgress),r.limitProgress));var o=d[0].swiperSlideOffset;const c=[g.params.cssMode?-o-g.translate:-o,0,0],u=[0,0,0];let t=!1,a=(g.isHorizontal()||(c[1]=c[0],c[0]=0),{translate:[0,0,0],rotate:[0,0,0],scale:1,opacity:1});p<0?(a=r.next,t=!0):0<p&&(a=r.prev,t=!0),c.forEach((e,t)=>{c[t]=`calc(${e}px + (${e=a.translate[t],"string"==typeof e?e:e+"px"} * ${Math.abs(p*n)}))`}),u.forEach((e,t)=>{u[t]=a.rotate[t]*Math.abs(p*n)}),d[0].style.zIndex=-Math.abs(Math.round(l))+i.length;var o=c.join(", "),l=`rotateX(${u[0]}deg) rotateY(${u[1]}deg) rotateZ(${u[2]}deg)`,f=e<0?`scale(${1+(1-a.scale)*e*n})`:`scale(${1-(1-a.scale)*e*n})`,v=e<0?1+(1-a.opacity)*e*n:1-(1-a.opacity)*e*n,o=`translate3d(${o}) ${l} `+f;if(t&&a.shadow||!t){let e=d.children(".swiper-slide-shadow");(e=0===e.length&&a.shadow?H(r,d):e).length&&(l=r.shadowPerProgress?p*(1/r.limitProgress):p,e[0].style.opacity=Math.min(Math.max(Math.abs(l),0),1))}const h=B(r,d);h.transform(o).css({opacity:v}),a.origin&&h.css("transform-origin",a.origin)}},setTransition:e=>{var t=g.params.creativeEffect["transformEl"];const a=t?g.slides.find(t):g.slides;a.transition(e).find(".swiper-slide-shadow").transition(e),N({swiper:g,duration:e,transformEl:t,allSlides:!0})},perspective:()=>g.params.creativeEffect.perspective,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!g.params.cssMode})})},function(e){let{swiper:x,extendParams:t,on:a}=e;t({cardsEffect:{slideShadows:!0,transformEl:null,rotate:!0}}),i({effect:"cards",swiper:x,on:a,setTranslate:()=>{const{slides:l,activeIndex:o}=x;var d=x.params.cardsEffect,{startTranslate:p,isTouched:c}=x.touchEventsData,u=x.translate;for(let n=0;n<l.length;n+=1){const v=l.eq(n);var g=v[0].progress,h=Math.min(Math.max(g,-4),4);let e=v[0].swiperSlideOffset,t=(x.params.centeredSlides&&!x.params.cssMode&&x.$wrapperEl.transform(`translateX(${x.minTranslate()}px)`),x.params.centeredSlides&&x.params.cssMode&&(e-=l[0].swiperSlideOffset),x.params.cssMode?-e-x.translate:-e),a=0;var w=-100*Math.abs(h);let s=1,i=-2*h,r=8-.75*Math.abs(h);var m=x.virtual&&x.params.virtual.enabled?x.virtual.from+n:n,f=(m===o||m===o-1)&&0<h&&h<1&&(c||x.params.cssMode)&&u<p,m=(m===o||m===o+1)&&h<0&&-1<h&&(c||x.params.cssMode)&&p<u,f=((f||m)&&(f=(1-Math.abs((Math.abs(h)-.5)/.5))**.5,i+=-28*h*f,s+=-.5*f,r+=96*f,a=-25*f*Math.abs(h)+"%"),h<0?t=`calc(${t}px + (${r*Math.abs(h)}%))`:0<h?t=`calc(${t}px + (-${r*Math.abs(h)}%))`:t+="px",x.isHorizontal()||(m=a,a=t,t=m),h<0?""+(1+(1-s)*h):""+(1-(1-s)*h)),m=`
        translate3d(${t}, ${a}, ${w}px)
        rotateZ(${d.rotate?i:0}deg)
        scale(${f})
      `;if(d.slideShadows){let e=v.find(".swiper-slide-shadow");(e=0===e.length?H(d,v):e).length&&(e[0].style.opacity=Math.min(Math.max((Math.abs(h)-.5)/.5,0),1))}v[0].style.zIndex=-Math.abs(Math.round(g))+l.length;const b=B(d,v);b.transform(m)}},setTransition:e=>{var t=x.params.cardsEffect["transformEl"];const a=t?x.slides.find(t):x.slides;a.transition(e).find(".swiper-slide-shadow").transition(e),N({swiper:x,duration:e,transformEl:t})},perspective:()=>!0,overwriteParams:()=>({watchSlidesProgress:!0,virtualTranslate:!x.params.cssMode})})}]),p});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,